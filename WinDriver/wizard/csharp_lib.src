%MSDEVNET2010AMD64%

===BEGIN MODULE lib/%LNAME%_lib_msdev_2010AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2010AMD64%
%MSDEVNET2010X86%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2010x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
%/PCI%
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2010X86%
%MSDEVNET2012AMD64%

===BEGIN MODULE lib/%LNAME%_lib_msdev_2012AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2012AMD64%
%MSDEVNET2012X86%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2012x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
%/PCI%
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2012X86%

%MSDEVNET2013AMD64%

===BEGIN MODULE lib/%LNAME%_lib_msdev_2013AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2013AMD64%
%MSDEVNET2013X86%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2013x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
%/PCI%
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2013X86%
%MSDEVNET2015AMD64%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2015AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2015AMD64%
%MSDEVNET2015X86%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2015x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
%/PCI%
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2015X86%
%MSDEVNET2017AMD64%

===BEGIN MODULE lib/%LNAME%_lib_msdev_2017AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2017AMD64%
%MSDEVNET2017X86%
===BEGIN MODULE lib/%LNAME%_lib_msdev_2017x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F42}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_lib</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>Library</OutputType>
    <RootNamespace>%LNAME%_lib</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Device.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="log.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_DeviceList.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="%LNAME%_Regs.cs">
      <SubType>Code</SubType>
    </Compile>
%/PCI%
%USB%
    <Compile Include="%LNAME%_DeviceManager.cs">
      <SubType>Code</SubType>
    </Compile>
%/USB%
  </ItemGroup>
%/PCI%
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2017X86%

%ASSEMBLYINFO%
===BEGIN MODULE lib/AssemblyInfo.cs
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("%NAME% Library")]
[assembly: AssemblyDescription("%NAME% Library")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Jungo Connectivity")]
[assembly: AssemblyProduct("WinDriver")]
[assembly: AssemblyCopyright("Jungo Connectivity Confidential. Copyright (c) %YEAR% Jungo Connectivity Ltd.  https://www.jungo.com")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers
// by using the '*' as shown below:

[assembly: AssemblyVersion("%VERSION%")]

//
// In order to sign your assembly you must specify a key to use. Refer to the
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing.
//
// Notes:
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]

%/ASSEMBLYINFO%

%USB%
===BEGIN MODULE lib/%NAME%_Device.cs

using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Threading;
using Jungo.wdapi_dotnet;

using DWORD = System.UInt32;
using WORD = System.UInt16;
using WDU_DEVICE_HANDLE = System.IntPtr;
using UCHAR = System.Byte;

namespace Jungo.%LNAME%_lib
{
    public delegate void D_USER_TRANSFER_COMPLETION(%NAME%_Pipe usbPipe);

    public class %NAME%_Pipe
    {
        private WDU_PIPE_INFO m_pPipe;
        private bool m_fInUse = false;
        private D_USER_TRANSFER_COMPLETION m_TransferCompletion;
        private Thread m_transThread = null;
        private WDU_DEVICE_HANDLE m_hDev;
        private DWORD m_dwTransferStatus;
        private DWORD m_dwBytesTransferred;
        private bool m_fRead;
        private DWORD m_dwOptions;
        private byte[] m_buffer;
        private DWORD m_dwBuffSize;
        private byte[] m_SetupPacket;
        private DWORD m_timeOut;
        private bool m_bIsContiguous = false;

        internal %NAME%_Pipe(WDU_PIPE_INFO pipe, WDU_DEVICE_HANDLE hDev)
        {
            m_pPipe = pipe;
            m_hDev = hDev;
        }

        internal void Dispose()
        {
            if (m_transThread != null && m_transThread.IsAlive)
            {
                HaltTransferOnPipe();
                m_transThread.Abort();
                m_transThread.Join();
            }
        }

        public WDU_PIPE_INFO GetPipeInfo()
        {
            return m_pPipe;
        }

        public DWORD GetPipeNum()
        {
            return m_pPipe.dwNumber;
        }

        public DWORD GetPipeMaxPacketSz()
        {
            return m_pPipe.dwMaximumPacketSize;
        }

        public DWORD GetPipeDirection()
        {
            return m_pPipe.direction;
        }

        public DWORD GetPipeInterval()
        {
            return m_pPipe.dwInterval;
        }

        public DWORD GetPipeType()
        {
            return m_pPipe.type;
        }

        public bool IsPipeDirectionIn()
        {
            return (m_pPipe.direction == (DWORD)WDU_DIR.WDU_DIR_IN);
        }

        public bool IsPipeDirectionOut()
        {
            return (m_pPipe.direction == (DWORD)WDU_DIR.WDU_DIR_OUT);
        }

        public bool IsPipeDirectionInOut()
        {
            return (m_pPipe.direction == (DWORD)WDU_DIR.WDU_DIR_IN_OUT);
        }

        public bool IsControlPipe()
        {
            return (m_pPipe.type == (DWORD)USB_PIPE_TYPE.PIPE_TYPE_CONTROL);
        }

        public bool IsBulkPipe()
        {
            return (m_pPipe.type == (DWORD)USB_PIPE_TYPE.PIPE_TYPE_BULK);
        }

        public bool IsInterruptPipe()
        {
            return (m_pPipe.type == (DWORD)USB_PIPE_TYPE.PIPE_TYPE_INTERRUPT);
        }

        public bool IsIsochronousPipe()
        {
            return (m_pPipe.type == (DWORD)USB_PIPE_TYPE.PIPE_TYPE_ISOCHRONOUS);
        }

        public bool IsInUse()
        {
            return m_fInUse;
        }

        public bool GetfRead()
        {
            return m_fRead;
        }

        public WDU_DEVICE_HANDLE GethDev()
        {
            return m_hDev;
        }

        public DWORD GetTransferStatus()
        {
            return m_dwTransferStatus;
        }

        public DWORD GetBytesTransferred()
        {
            return m_dwBytesTransferred;
        }

        public DWORD GetBuffSize()
        {
            return m_dwBuffSize;
        }

        public DWORD GetTimeOut()
        {
            return m_timeOut;
        }

        public byte[] GetBuffer()
        {
            return m_buffer;
        }

        public byte[]GetSetupPacket()
        {
            return m_SetupPacket;
        }

        public void SetContiguous(bool bIsContiguous)
        {
            m_bIsContiguous = bIsContiguous;
        }

        public bool IsContiguous()
        {
            return m_bIsContiguous;
        }

        public DWORD UsbPipeTransfer(bool fRead, DWORD dwOptions, byte[] buffer,
        DWORD dwBuffSize, ref DWORD dwBytesTransfered, byte[] pSetupPacket,
        DWORD timeOut)
        {
            dwOptions |= (m_pPipe.type ==
                (DWORD)USB_PIPE_TYPE.PIPE_TYPE_ISOCHRONOUS) ?
                (DWORD)TRANSFER_OPTIONS.USB_ISOCH_FULL_PACKETS_ONLY : 0;

            m_fRead = fRead;
            m_fInUse = true;

            m_dwTransferStatus = wdu_lib_decl.WDU_Transfer(m_hDev,
            m_pPipe.dwNumber, (DWORD)(fRead == true ? 1 : 0), dwOptions, buffer,
            dwBuffSize, ref dwBytesTransfered, pSetupPacket, timeOut);

            if (!m_bIsContiguous)
                m_fInUse = false;
            m_buffer = buffer;
            m_dwBytesTransferred = dwBytesTransfered;
            return m_dwTransferStatus;
        }

        void AsyncTransfer()
        {
            do
            {
                m_dwTransferStatus = UsbPipeTransfer(m_fRead, m_dwOptions,
                    m_buffer, m_dwBuffSize, ref m_dwBytesTransferred,
                    m_SetupPacket, m_timeOut);
                if  (m_dwTransferStatus !=
                    (DWORD)WD_ERROR_CODES.WD_STATUS_SUCCESS)
                {
                    m_bIsContiguous = false;
                    m_fInUse = false;
                }
                m_TransferCompletion(this);
            } while (m_bIsContiguous);

        }

        public void UsbPipeTransferAsync(bool fRead, DWORD dwOptions,
            byte[] buffer, DWORD dwBuffSize, DWORD timeOut,
            D_USER_TRANSFER_COMPLETION TransferCompletion)
        {
            m_fRead = fRead;
            m_dwOptions = dwOptions;
            m_buffer = buffer;
            m_dwBuffSize = dwBuffSize;
            m_SetupPacket = null;
            m_timeOut = timeOut;
            m_TransferCompletion = TransferCompletion;
            m_fInUse = true;
            m_transThread = new Thread(new ThreadStart(AsyncTransfer));
            m_transThread.Start();
        }

        public void UsbPipeTransferAsync(bool fRead, DWORD dwOptions,
            DWORD timeOut, D_USER_TRANSFER_COMPLETION TransferCompletion)
        {
            m_fRead = fRead;
            m_dwOptions = dwOptions;
            m_timeOut = timeOut;
            m_TransferCompletion = TransferCompletion;

            m_dwBuffSize = (DWORD)((m_pPipe.type !=
                (DWORD)USB_PIPE_TYPE.PIPE_TYPE_ISOCHRONOUS) ?
                m_pPipe.dwMaximumPacketSize : m_pPipe.dwMaximumPacketSize * 8);
            m_buffer = new byte[m_dwBuffSize];

            m_SetupPacket = null;
            m_fInUse = true;
            m_transThread = new Thread(new ThreadStart(AsyncTransfer));
            m_transThread.Start();

        }

        public DWORD HaltTransferOnPipe()
        {
            m_fInUse = false;
            return wdu_lib_decl.WDU_HaltTransfer(m_hDev, GetPipeNum());

        }

        public DWORD ResetPipe()
        {
            return wdu_lib_decl.WDU_ResetPipe(m_hDev, GetPipeNum());
        }
    };

    public class PipeList : ArrayList
    {
        internal PipeList(WDU_PIPE_INFO pPipe0, WDU_ALTERNATE_SETTING
            pActiveAltSetting, WDU_DEVICE_HANDLE hDev)
        {
            WDU_PIPE_INFO pipe_info;
            DWORD dwPipeIndex = 0;
            DWORD dwNumOfPipes = pActiveAltSetting.Descriptor.bNumEndpoints;
            DWORD dwPipeSize = (DWORD)Marshal.SizeOf(typeof(WDU_PIPE_INFO));

            //inserting the control pipe to the list
            this.Insert(0, new %NAME%_Pipe(pPipe0, hDev));

            // Retrieving the rest of the pipes from the active alternating
            // settings struct and inserting them into the pipes' list
            for (dwPipeIndex = 0; dwPipeIndex < dwNumOfPipes; ++dwPipeIndex)
            {
                pipe_info = (WDU_PIPE_INFO)Convert.ChangeType
                    (Marshal.PtrToStructure(new
                        IntPtr(pActiveAltSetting.pPipes.ToInt64()
                        + dwPipeIndex * dwPipeSize), typeof(WDU_PIPE_INFO)),
                        typeof(WDU_PIPE_INFO));
                %NAME%_Pipe pipe = new %NAME%_Pipe(pipe_info, hDev);

                this.Insert((int)dwPipeIndex + 1, pipe);
            }
        }

        internal void Dispose()
        {
            for (int pipeIndex = 0; pipeIndex < this.Count; ++pipeIndex)
                ((%NAME%_Pipe)this[pipeIndex]).Dispose();
        }
    };

    public class %NAME%_Device
    {
        private WDU_DEVICE_HANDLE hDevice;
        private WORD wVid;
        private WORD wPid;
        private DWORD dwInterfaceNum; // Interface number currently used by
                                      // the app
        private DWORD dwAltSettingNum; // The active setting of the currently
                                       // used interface
        private DWORD dwAddr = VALUE_NONE;
        private DWORD dwNumOfInterfaces;
        private DWORD dwNumOfAltSettingsTotal;
        private PipeList pPipesList = null; // A list of the pipes of the
                                            // currently used interface
        private const DWORD VALUE_NONE = 0xffffffff;

        struct INTERFACE_INFO
        {
            public WDU_INTERFACE wduInterface;
            public UCHAR bInterfaceNumber; // Keep a local copy to avoid
                                           // marshalling
        }

        private INTERFACE_INFO[] interfacesInfo;

        internal %NAME%_Device(WDU_DEVICE_HANDLE hDev,
            ref WDU_DEVICE pDeviceInfo)
        {
            WDU_CONFIGURATION pConfig =
                (WDU_CONFIGURATION)Marshal.PtrToStructure(
                    pDeviceInfo.pActiveConfig, typeof(WDU_CONFIGURATION));

            dwNumOfInterfaces = pConfig.dwNumInterfaces;
            interfacesInfo = new INTERFACE_INFO[dwNumOfInterfaces];
            hDevice = hDev;

            for (uint i = 0; i < dwNumOfInterfaces; ++i)
            {
                interfacesInfo[i].wduInterface =
                    (WDU_INTERFACE)Marshal.PtrToStructure(
                    pDeviceInfo.pActiveInterface(i), typeof(WDU_INTERFACE));
                WDU_ALTERNATE_SETTING pAltSetting =
                    (WDU_ALTERNATE_SETTING)Marshal.PtrToStructure(
                    interfacesInfo[i].wduInterface.pActiveAltSetting,
                    typeof(WDU_ALTERNATE_SETTING));

                if (i == 0)
                {
                    dwInterfaceNum = pAltSetting.Descriptor.bInterfaceNumber;
                    dwAltSettingNum = pAltSetting.Descriptor.bAlternateSetting;
                    pPipesList = new PipeList(pDeviceInfo.Pipe0, pAltSetting,
                        hDevice);
                }

                interfacesInfo[i].bInterfaceNumber =
                    pAltSetting.Descriptor.bInterfaceNumber;

                dwNumOfAltSettingsTotal +=
                    interfacesInfo[i].wduInterface.dwNumAltSettings;
            }

            DWORD dwStatus = wdu_lib_decl.WDU_GetDeviceAddr(hDevice,
                ref dwAddr);

            wVid = (WORD)pDeviceInfo.Descriptor.idVendor;
            wPid = (WORD)pDeviceInfo.Descriptor.idProduct;
        }

        internal void Dispose()
        {
            pPipesList.Dispose();
        }

        internal WDU_DEVICE_HANDLE GethDevice()
        {
            return hDevice;
        }

        internal int GetInterfaceIndexByNumber(DWORD dwInterfaceNumber)
        {
            for (int i = 0; i < dwNumOfInterfaces; ++i)
            {
                if (interfacesInfo[i].bInterfaceNumber == dwInterfaceNumber)
                    return i;
            }

            return -1;
        }

        public UCHAR GetInterfaceNumberByIndex(uint index)
        {
            return interfacesInfo[index].bInterfaceNumber;
        }

        public WORD GetVid()
        {
            return wVid;
        }

        public WORD GetPid()
        {
            return wPid;
        }

        public DWORD GetCurrInterfaceNum()
        {
            return dwInterfaceNum;
        }

        public DWORD GetCurrInterfaceIndex()
        {
            return (DWORD)GetInterfaceIndexByNumber(dwInterfaceNum);
        }

        public DWORD GetCurrAlternateSettingNum()
        {
            return dwAltSettingNum;
        }

        public DWORD GetNumOfInteraces()
        {
            return dwNumOfInterfaces;
        }

        public DWORD GetNumOfAlternateSettingsPerInterface(
            DWORD dwInterfaceNumber)
        {
            int i = GetInterfaceIndexByNumber(dwInterfaceNumber);

            if (i != -1)
                return interfacesInfo[i].wduInterface.dwNumAltSettings;
            else
                return 0;
        }

        public DWORD GetNumOfAlternateSettingsTotal()
        {
            return dwNumOfAltSettingsTotal;
        }

        public PipeList GetpPipesList()
        {
            return pPipesList;
        }

        public DWORD ChangeAlternateSetting(DWORD newInterface,
            DWORD newSetting)
        {
            DWORD dwStatus = (DWORD)WD_ERROR_CODES.WD_STATUS_SUCCESS;

            // If the chosen setting is the same as it was - do nothing
            if (newInterface == this.dwInterfaceNum &&
                newSetting == this.dwAltSettingNum)
            {
                return dwStatus;
            }

            dwStatus = wdu_lib_decl.WDU_SetInterface(hDevice, newInterface,
                newSetting);
            if (dwStatus != (DWORD)WD_ERROR_CODES.WD_STATUS_SUCCESS)
                return dwStatus;

            IntPtr ppDeviceInfo = (System.IntPtr)0;
            dwStatus = (DWORD)wdu_lib_decl.WDU_GetDeviceInfo(hDevice,
                ref ppDeviceInfo);
            if (dwStatus != (DWORD)WD_ERROR_CODES.WD_STATUS_SUCCESS)
                return dwStatus;

            WDU_DEVICE pDeviceInfo =
                (WDU_DEVICE)Marshal.PtrToStructure(ppDeviceInfo,
                typeof(WDU_DEVICE));

            int index = GetInterfaceIndexByNumber(newInterface);
            interfacesInfo[index].wduInterface =
                (WDU_INTERFACE)Marshal.PtrToStructure(
                pDeviceInfo.pActiveInterface((uint)index),
                typeof(WDU_INTERFACE));

            WDU_ALTERNATE_SETTING pActiveAltSetting = (WDU_ALTERNATE_SETTING)
                    Marshal.PtrToStructure(interfacesInfo[index].
                    wduInterface.pActiveAltSetting,
                    typeof(WDU_ALTERNATE_SETTING));
            dwInterfaceNum = newInterface;
            dwAltSettingNum = newSetting;
            pPipesList =
                new PipeList(((%NAME%_Pipe)(pPipesList[0])).GetPipeInfo(),
                pActiveAltSetting, hDevice);
            wdu_lib_decl.WDU_PutDeviceInfo(ppDeviceInfo);

            return dwStatus;
        }

        public bool IsDeviceTransferring()
        {
            for (int i = 0; i < pPipesList.Count; ++i)
            {
                if (((%NAME%_Pipe)pPipesList[i]).IsInUse())
                    return true;
            }

            return false;
        }

        public string DeviceDescription()
        {
            string deviceDesc = "Device ";

            if (dwAddr != VALUE_NONE)
                string.Concat(deviceDesc, "0x" , dwAddr.ToString("X") , ", ");

            return string.Concat(deviceDesc, "vid 0x", wVid.ToString("X"),
                ", pid 0x", wPid.ToString("X"), ", ifc ",
                dwInterfaceNum.ToString(), ", alt setting ",
                dwAltSettingNum.ToString(), ", handle 0x",
                hDevice.ToString());
        }

        public static bool operator ==(%NAME%_Device u1, %NAME%_Device u2)
        {
            try
            {
                return (u1.hDevice == u2.hDevice);
            }
            catch
            {
                return false;
            }

        }

        public static bool operator !=(%NAME%_Device u1, %NAME%_Device u2)
        {
            return !(u1 == u2);
        }

        public override bool Equals(object obj)
        {
            try
            {
                return (bool)(this == (%NAME%_Device)obj);
            }
            catch
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return (int)hDevice;
        }
    };
}

===BEGIN MODULE lib/%NAME%_DeviceManager.cs

using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Data;
using System.Threading;
using Jungo.wdapi_dotnet;

using DWORD = System.UInt32;
using WORD = System.UInt16;
using WDU_DEVICE_HANDLE = System.IntPtr;

namespace Jungo.%LNAME%_lib
{
    public delegate void D_USER_ATTACH_CALLBACK(%NAME%_Device pDev);
    public delegate void D_USER_DETACH_CALLBACK(%NAME%_Device pDev);
    public delegate void D_USER_POWER_CHANGE_CALLBCAK(%NAME%_Device pDev);

    public class %NAME%_DeviceManager
    {
        WDU_DEVICE_HANDLE hDriver;
        private ArrayList pDevicesList = null;
        private D_USER_ATTACH_CALLBACK dUserAttachCb;
        private D_USER_DETACH_CALLBACK dUserDetachCb;
        private D_USER_POWER_CHANGE_CALLBCAK dUserPowerCb = null;
        private WDU_EVENT_TABLE eventTable;
        private WDU_MATCH_TABLE[] matchTableArr = new WDU_MATCH_TABLE[1];
        private Mutex hMutex = null;

        public %NAME%_DeviceManager(D_USER_ATTACH_CALLBACK dAttachCb,
            D_USER_DETACH_CALLBACK dDetachCb,
            D_USER_POWER_CHANGE_CALLBCAK dPowerCb,
            WORD wVendorId, WORD wProductId, string sDriverName, string lic)
        {
            DWORD dwStatus = 0;

            windrvr_decl.WD_DriverName(sDriverName);
            pDevicesList = new ArrayList();
            dUserAttachCb = dAttachCb;
            dUserDetachCb = dDetachCb;
            dUserPowerCb = dPowerCb;

            matchTableArr[0].wVendorId = (WORD)wVendorId;
            matchTableArr[0].wProductId = (WORD)wProductId;

            eventTable = new WDU_EVENT_TABLE(new
                D_WDU_ATTACH_CALLBACK(DeviceAttach),
                new D_WDU_DETACH_CALLBACK(DeviceDetach));

            hMutex = new Mutex();
            dwStatus = wdu_lib_decl.WDU_Init(ref hDriver, matchTableArr,
                (DWORD)matchTableArr.Length, ref eventTable, lic,
                (DWORD)windrvr_consts.WD_ACKNOWLEDGE);

            if (WD_ERROR_CODES.WD_STATUS_SUCCESS != (WD_ERROR_CODES)dwStatus)
                hMutex.Close();
        }

        public %NAME%_DeviceManager(D_USER_ATTACH_CALLBACK dAttachCb,
            D_USER_DETACH_CALLBACK dDetachCb, WORD wVendorId,
            WORD wProductId, string sDriverName, string lic) : this(dAttachCb,
                dDetachCb, null, wVendorId, wProductId, sDriverName, lic)
        {
        }

        public void Dispose()
        {
            if (hMutex != null)
                hMutex.Close();

            for (int i = 0; i < pDevicesList.Count; ++i)
                ((%NAME%_Device)pDevicesList[0]).Dispose();

            wdu_lib_decl.WDU_Uninit(hDriver);
        }

        public DWORD GetNumOfDevicesAttached()
        {
            return (DWORD)pDevicesList.Count;
        }

        private bool DeviceAttach(WDU_DEVICE_HANDLE hDevice, ref WDU_DEVICE
            pDeviceInfo, IntPtr pUserData)
        {
            %NAME%_Device pDev = new %NAME%_Device(hDevice, ref pDeviceInfo);

            hMutex.WaitOne();
            pDevicesList.Add(pDev);
            hMutex.ReleaseMutex();

            dUserAttachCb(pDev);
            return true;
        }

        private void DeviceDetach(WDU_DEVICE_HANDLE hDevice, IntPtr pUserData)
        {
            %NAME%_Device pDev = null;
            int index = 0;

            hMutex.WaitOne();

            if (pDevicesList.Count == 0)
            {
                hMutex.ReleaseMutex();
                return;
            }

            for (index = 0; index < pDevicesList.Count; ++index)
            {
                pDev = (%NAME%_Device)pDevicesList[index];
                if (pDev.GethDevice() == hDevice)
                    break;
            }

            if (pDev != null)
            {
                pDevicesList.Remove(pDev);
            }

            hMutex.ReleaseMutex();
            dUserDetachCb(pDev);
            pDev.Dispose();
        }
    };
}

%/USB%

%PCI%
===BEGIN MODULE lib/%NAME%_DeviceList.cs

using System;
using System.Collections;

using Jungo.wdapi_dotnet;
using wdc_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using DWORD = System.UInt32;
using BOOL = System.Boolean;
using WDC_DRV_OPEN_OPTIONS = System.UInt32;

namespace Jungo.%LNAME%_lib
{
    public class %NAME%_DeviceList: ArrayList
    {
        private string %NAME%_DEFAULT_LICENSE_STRING  = "%LICENSE%";
        // TODO: If you have renamed the WinDriver kernel module
        // (windrvr1281.sys), change the driver name below accordingly
        private string %NAME%_DEFAULT_DRIVER_NAME  = "windrvr1281";
        private DWORD %NAME%_DEFAULT_VENDOR_ID = %VID%;
        private DWORD %NAME%_DEFAULT_DEVICE_ID = %PID%;

        private static %NAME%_DeviceList instance;

        public static %NAME%_DeviceList TheDeviceList()
        {
            if (instance == null)
            {
                instance = new %NAME%_DeviceList();
            }
            return instance;
        }

        private %NAME%_DeviceList(){}

        public DWORD Init()
        {
            if (windrvr_decl.WD_DriverName(%NAME%_DEFAULT_DRIVER_NAME) == null)
            {
                Log.ErrLog(
                    "%NAME%_DeviceList.Init: Failed to set driver name for the "
                    + "WDC library.");
                return (DWORD)wdc_err.WD_SYSTEM_INTERNAL_ERROR;
            }

            DWORD dwStatus =
                wdc_lib_decl.WDC_SetDebugOptions(wdc_lib_consts.WDC_DBG_DEFAULT,
                null);
            if (dwStatus != (DWORD)wdc_err.WD_STATUS_SUCCESS)
            {
                Log.ErrLog("%NAME%_DeviceList.Init: Failed to initialize debug "
                    + "options for the WDC library. Error 0x" +
                    dwStatus.ToString("X") + utils.Stat2Str(dwStatus));
                return dwStatus;
            }

            dwStatus = wdc_lib_decl.WDC_DriverOpen(
                (WDC_DRV_OPEN_OPTIONS)wdc_lib_consts.WDC_DRV_OPEN_DEFAULT,
                %NAME%_DEFAULT_LICENSE_STRING);
            if (dwStatus != (DWORD)wdc_err.WD_STATUS_SUCCESS)
            {
                Log.ErrLog("%NAME%_DeviceList.Init: Failed to initialize the " +
                    "WDC library. Error 0x" + dwStatus.ToString("X") +
                    utils.Stat2Str(dwStatus));
                return dwStatus;
            }

            return Populate();
        }

        public %NAME%_Device Get(int index)
        {
            if (index >= this.Count || index < 0)
                return null;
            return (%NAME%_Device)this[index];
        }

        public %NAME%_Device Get(WD_PCI_SLOT slot)
        {
            foreach(%NAME%_Device device in this)
            {
                if (device.IsMySlot(ref slot))
                    return device;
            }
            return null;
        }

        private DWORD Populate()
        {
            DWORD dwStatus;
            WDC_PCI_SCAN_RESULT scanResult = new WDC_PCI_SCAN_RESULT();

            dwStatus = wdc_lib_decl.WDC_PciScanDevices(%NAME%_DEFAULT_VENDOR_ID,
                %NAME%_DEFAULT_DEVICE_ID, scanResult);
            if ((DWORD)wdc_err.WD_STATUS_SUCCESS != dwStatus)
            {
                Log.ErrLog("%NAME%_DeviceList.Populate: Failed scanning "
                    + "the PCI bus. Error 0x" + dwStatus.ToString("X") +
                    utils.Stat2Str(dwStatus));
                return dwStatus;
            }

            if (scanResult.dwNumDevices == 0)
            {
                Log.ErrLog("%NAME%_DeviceList.Populate: No matching PCI " +
                    "device was found for search criteria " +
                    %NAME%_DEFAULT_VENDOR_ID.ToString("X") + ", " +
                    %NAME%_DEFAULT_DEVICE_ID.ToString("X"));
                return (DWORD)wdc_err.WD_INVALID_PARAMETER;
            }

            for (int i = 0; i < scanResult.dwNumDevices; ++i)
            {
                %NAME%_Device device;
                WD_PCI_SLOT slot = scanResult.deviceSlot[i];

                device = new %NAME%_Device(scanResult.deviceId[i].dwVendorId,
                    scanResult.deviceId[i].dwDeviceId, slot);

                this.Add(device);
            }
            return (DWORD)wdc_err.WD_STATUS_SUCCESS;
        }

        public void Dispose()
        {
            foreach (%NAME%_Device device in this)
                device.Dispose();
            this.Clear();

            DWORD dwStatus = wdc_lib_decl.WDC_DriverClose();
            if (dwStatus != (DWORD)wdc_err.WD_STATUS_SUCCESS)
            {
                Exception excp = new Exception("%NAME%_DeviceList.Dispose: " +
                    "Failed to uninit the WDC library. Error 0x" +
                    dwStatus.ToString("X") + utils.Stat2Str(dwStatus));
                throw excp;
            }
        }
    };
}

===BEGIN MODULE lib/log.cs
using System;
using Jungo.wdapi_dotnet;

using BYTE = System.Byte;
using WORD = System.UInt16;
using DWORD = System.UInt32;
using UINT32 = System.UInt32;
using UINT64 = System.UInt64;

namespace Jungo.%LNAME%_lib
{
    public class Log
    {
        public delegate void TRACE_LOG(string str);
        public delegate void ERR_LOG(string str);

        public static TRACE_LOG dTraceLog;
        public static ERR_LOG dErrLog;

        public Log(TRACE_LOG funcTrace, ERR_LOG funcErr)
        {
            dTraceLog = funcTrace;
            dErrLog = funcErr;
        }

        public static void TraceLog(string str)
        {
            if (dTraceLog == null)
                return;

            dTraceLog(str);
        }

        public static void ErrLog(string str)
        {
            if (dErrLog == null)
                return;

            dErrLog(str);
        }
    }
}

%/PCI%

