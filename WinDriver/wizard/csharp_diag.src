%MSDEVNET2010AMD64%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2010AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2010AMD64%
%MSDEVNET2010X86%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2010x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
<Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>


%/MSDEVNET2010X86%
%MSDEVNET2012AMD64%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2012AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2012AMD64%
%MSDEVNET2012X86%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2012x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
<Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>


%/MSDEVNET2012X86%
%MSDEVNET2013AMD64%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2013AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2013AMD64%
%MSDEVNET2013X86%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2013x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
<Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>


%/MSDEVNET2013X86%
%MSDEVNET2015AMD64%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2015AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2015AMD64%
%MSDEVNET2015X86%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2015x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
<Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>


%/MSDEVNET2015X86%
%MSDEVNET2017AMD64%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2017AMD64.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>

%/MSDEVNET2017AMD64%
%MSDEVNET2017X86%

===BEGIN MODULE diag/%LNAME%_diag_msdev_2017x86.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectType>Local</ProjectType>
    <ProductVersion>10.0.30319</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{73E4CFBA-782E-4A35-B4BD-8E1FDE9E5F43}</ProjectGuid>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">Win32</Platform>
    <ApplicationIcon>
    </ApplicationIcon>
    <AssemblyKeyContainerName>
    </AssemblyKeyContainerName>
    <AssemblyName>%LNAME%_diag</AssemblyName>
    <AssemblyOriginatorKeyFile>
    </AssemblyOriginatorKeyFile>
    <DefaultClientScript>JScript</DefaultClientScript>
    <DefaultHTMLPageLayout>Grid</DefaultHTMLPageLayout>
    <DefaultTargetSchema>IE50</DefaultTargetSchema>
    <DelaySign>false</DelaySign>
    <OutputType>WinExe</OutputType>
    <RootNamespace>%LNAME%_diag</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <StartupObject>
    </StartupObject>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
    <OutputPath>bin\Debug\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>true</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>false</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>full</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
    <OutputPath>bin\Release\v4.0.30319\</OutputPath>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <BaseAddress>285212672</BaseAddress>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <ConfigurationOverrideFile>
    </ConfigurationOverrideFile>
    <DefineConstants>TRACE</DefineConstants>
    <DocumentationFile>
    </DocumentationFile>
    <DebugSymbols>false</DebugSymbols>
    <FileAlignment>4096</FileAlignment>
    <NoStdLib>false</NoStdLib>
    <NoWarn>
    </NoWarn>
    <Optimize>true</Optimize>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningLevel>4</WarningLevel>
    <DebugType>none</DebugType>
    <ErrorReport>prompt</ErrorReport>
    <PlatformTarget>%PLATFORM_TARGET%</PlatformTarget>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System">
      <Name>System</Name>
    </Reference>
    <Reference Include="System.Data">
      <Name>System.Data</Name>
    </Reference>
    <Reference Include="System.Drawing">
      <Name>System.Drawing</Name>
    </Reference>
    <Reference Include="System.Windows.Forms">
      <Name>System.Windows.Forms</Name>
    </Reference>
    <Reference Include="System.Xml">
      <Name>System.XML</Name>
    </Reference>
    <Reference Include="%LNAME%_lib">
      <Name>%LNAME%_lib</Name>
      <HintPath>..\lib\bin\$(Configuration)\v4.0.30319\%LNAME%_lib.dll</HintPath>
    </Reference>
    <Reference Include="wdapi_dotnet%WDVER%">
      <HintPath>%BASEDIR%\lib\%LIBARCHDIR%\v4.0.30319\wdapi_dotnet%WDVER%.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
<Compile Include="%LNAME%_diag.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
%PCI%
    <Compile Include="AddrSpaceTransferForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CfgTransfersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="RegistersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="AddrSpaceTransferForm.resx">
      <DependentUpon>AddrSpaceTransferForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CfgTransfersForm.resx">
      <DependentUpon>CfgTransfersForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="RegistersForm.resx">
      <DependentUpon>RegistersForm.cs</DependentUpon>
    </EmbeddedResource>
%/PCI%
%USB%
    <Compile Include="DeviceTabPage.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="FormTransfers.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormChangeSettings.cs">
      <SubType>Form</SubType>
    </Compile>
    <EmbeddedResource Include="FormChangeSettings.resx">
      <DependentUpon>FormChangeSettings.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormTransfers.resx">
      <DependentUpon>FormTransfers.cs</DependentUpon>
    </EmbeddedResource>
%/USB%
    <EmbeddedResource Include="%LNAME%_diag.resx">
      <DependentUpon>%LNAME%_diag.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>


%/MSDEVNET2017X86%
%ASSEMBLYINFO%

===BEGIN MODULE diag/AssemblyInfo.cs
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("%NAME% Diag")]
[assembly: AssemblyDescription("%NAME% Diag")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Jungo Connectivity")]
[assembly: AssemblyProduct("WinDriver")]
[assembly: AssemblyCopyright("Jungo Connectivity Confidential. Copyright (c) %YEAR% Jungo Connectivity Ltd.  https://www.jungo.com")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers
// by using the '*' as shown below:

[assembly: AssemblyVersion("%VERSION%")]

//
// In order to sign your assembly you must specify a key to use. Refer to the
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing.
//
// Notes:
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]

%/ASSEMBLYINFO%

%USB%
===BEGIN MODULE diag/%NAME%_diag.cs
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;

using Jungo.wdapi_dotnet;
using wdu_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using Jungo.%LNAME%_lib;

using DWORD = System.UInt32;
using WORD = System.UInt16;

namespace Jungo.%LNAME%_diag
{
    public class %LNAME% : System.Windows.Forms.Form
    {
        delegate void safeLogTextCallBack(string sMsg);
        delegate void safeButtonsAccess();

        internal System.Windows.Forms.Label lblNumDevices;
        internal System.Windows.Forms.Label lblNumDevicesText;
        internal System.Windows.Forms.Button btLogClear;
        internal System.Windows.Forms.Button btActiveAltSetChange;
        internal System.Windows.Forms.Label lbLog;
        internal System.Windows.Forms.TextBox txtLog;
        internal System.Windows.Forms.TabControl tabDevices;
        internal System.Windows.Forms.Button btPipeWrite;
        internal System.Windows.Forms.Button btPipeRead;
        internal System.Windows.Forms.Button btPipeListen;
        internal System.Windows.Forms.Button btPipeReset;
        internal System.Windows.Forms.Button btExit;

        private System.ComponentModel.Container components = null;

        private const string APP_LNAME = ".NET USB Sample";
        private const string DEFAULT_LICENSE_STRING = "%LICENSE%";
        // TODO: If you have renamed the WinDriver kernel module
        // (windrvr1281.sys),
        //  change the driver name below accordingly
        private const string DEFAULT_DRIVER_NAME = "windrvr1281";
        private const WORD DEFAULT_VENDOR_ID = %VID%;
        private const WORD DEFAULT_PRODUCT_ID = %PID%;
        public const DWORD TIME_OUT = 30000;
        private %NAME%_DeviceManager uDevManager;
        private delegate void D_ATTACH_GUI_CALLBACK(%NAME%_Device pDev);
        private delegate void D_DETACH_GUI_CALLBACK(%NAME%_Device pDev);

        public %LNAME%()
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

#region Windows Form Designer generated code
        private void InitializeComponent()
        {
            lblNumDevices = new System.Windows.Forms.Label();
            lblNumDevicesText = new System.Windows.Forms.Label();
            btLogClear = new System.Windows.Forms.Button();
            btActiveAltSetChange = new System.Windows.Forms.Button();
            lbLog = new System.Windows.Forms.Label();
            txtLog = new System.Windows.Forms.TextBox();
            tabDevices = new System.Windows.Forms.TabControl();
            btPipeWrite = new System.Windows.Forms.Button();
            btPipeRead = new System.Windows.Forms.Button();
            btPipeListen = new System.Windows.Forms.Button();
            btPipeReset = new System.Windows.Forms.Button();
            btExit = new System.Windows.Forms.Button();
            SuspendLayout();

            lblNumDevices.Font = new System.Drawing.Font("Microsoft Sans Serif"
                , 9F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblNumDevices.Location = new System.Drawing.Point(172, 26);
            lblNumDevices.Name = "lblNumDevices";
            lblNumDevices.Size = new System.Drawing.Size(16, 16);
            lblNumDevices.TabIndex = 13;
            lblNumDevices.Text = "0";
            lblNumDevices.TextAlign =
                System.Drawing.ContentAlignment.MiddleLeft;

            lblNumDevicesText.ImageAlign =
                System.Drawing.ContentAlignment.MiddleLeft;
            lblNumDevicesText.Location = new System.Drawing.Point(20, 18);
            lblNumDevicesText.Name = "lblNumDevicesText";
            lblNumDevicesText.Size = new System.Drawing.Size(152, 32);
            lblNumDevicesText.TabIndex = 12;
            lblNumDevicesText.Text = "Number of attached devices:";
            lblNumDevicesText.TextAlign =
                System.Drawing.ContentAlignment.MiddleCenter;

            btLogClear.Location = new System.Drawing.Point(684, 394);
            btLogClear.Name = "btLogClear";
            btLogClear.Size = new System.Drawing.Size(88, 40);
            btLogClear.TabIndex = 20;
            btLogClear.Text = "&Clear Log";
            btLogClear.Click += new System.EventHandler(btLogClear_Click);

            btActiveAltSetChange.Location = new System.Drawing.Point(780, 298);
            btActiveAltSetChange.Name = "btActiveAltSetChange";
            btActiveAltSetChange.Size = new System.Drawing.Size(88, 48);
            btActiveAltSetChange.TabIndex = 19;
            btActiveAltSetChange.Text = "Change active &alternate setting";
            btActiveAltSetChange.Click += new
                System.EventHandler(btActiveAltSetChange_Click);

            lbLog.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lbLog.Location = new System.Drawing.Point(20, 378);
            lbLog.Name = "lbLog";
            lbLog.Size = new System.Drawing.Size(72, 16);
            lbLog.TabIndex = 21;
            lbLog.Text = "Log";

            txtLog.AutoSize = false;
            txtLog.Location = new System.Drawing.Point(20, 394);
            txtLog.Multiline = true;
            txtLog.Name = "txtLog";
            txtLog.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            txtLog.Size = new System.Drawing.Size(648, 192);
            txtLog.TabIndex = 22;
            txtLog.Text = "";

            tabDevices.ItemSize = new System.Drawing.Size(350, 18);
            tabDevices.Location = new System.Drawing.Point(20, 66);
            tabDevices.Name = "tabDevices";
            tabDevices.RightToLeft = System.Windows.Forms.RightToLeft.No;
            tabDevices.SelectedIndex = 0;
            tabDevices.Size = new System.Drawing.Size(738, 280);
            tabDevices.SizeMode = System.Windows.Forms.TabSizeMode.Fixed;
            tabDevices.TabIndex = 14;
            tabDevices.SelectedIndexChanged += new
                System.EventHandler(tabDevices_SelectedIndexChanged);

            btPipeWrite.Location = new System.Drawing.Point(780, 138);
            btPipeWrite.Name = "btPipeWrite";
            btPipeWrite.Size = new System.Drawing.Size(88, 40);
            btPipeWrite.TabIndex = 16;
            btPipeWrite.Text = "&Write To Pipe";
            btPipeWrite.Click += new System.EventHandler(btPipeWrite_Click);

            btPipeRead.Location = new System.Drawing.Point(780, 90);
            btPipeRead.Name = "btPipeRead";
            btPipeRead.Size = new System.Drawing.Size(88, 40);
            btPipeRead.TabIndex = 15;
            btPipeRead.Text = "&Read From Pipe";
            btPipeRead.Click += new System.EventHandler(btPipeRead_Click);

            btPipeListen.Location = new System.Drawing.Point(780, 186);
            btPipeListen.Name = "btPipeListen";
            btPipeListen.Size = new System.Drawing.Size(88, 48);
            btPipeListen.TabIndex = 17;
            btPipeListen.Text = "&Listen To Pipe";
            btPipeListen.Click += new System.EventHandler(btPipeListen_Click);

            btPipeReset.Location = new System.Drawing.Point(780, 242);
            btPipeReset.Name = "btPipeReset";
            btPipeReset.Size = new System.Drawing.Size(88, 48);
            btPipeReset.TabIndex = 18;
            btPipeReset.Text = "Re&set Pipe";
            btPipeReset.Click += new System.EventHandler(btPipeReset_Click);

            btExit.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            btExit.Location = new System.Drawing.Point(688, 536);
            btExit.Name = "btExit";
            btExit.Size = new System.Drawing.Size(88, 40);
            btExit.TabIndex = 23;
            btExit.Text = "&Exit";
            btExit.Click += new System.EventHandler(btExit_Click);

            AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            ClientSize = new System.Drawing.Size(888, 605);
            Controls.Add(btExit);
            Controls.Add(lblNumDevices);
            Controls.Add(lblNumDevicesText);
            Controls.Add(btLogClear);
            Controls.Add(btActiveAltSetChange);
            Controls.Add(lbLog);
            Controls.Add(txtLog);
            Controls.Add(tabDevices);
            Controls.Add(btPipeWrite);
            Controls.Add(btPipeRead);
            Controls.Add(btPipeListen);
            Controls.Add(btPipeReset);
            Name = "%LNAME%";
            Text = "%LNAME% : USB .NET Project";
            Load += new System.EventHandler(%LNAME%_Load);
            Closed += new System.EventHandler(%LNAME%_Closing);
            ResumeLayout(false);

        }
#endregion

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.Run(new %LNAME%());
        }

        private void UserDeviceAttach(%NAME%_Device pDev)
        {
            D_ATTACH_GUI_CALLBACK AttachCb = new
                D_ATTACH_GUI_CALLBACK(DeviceAttachGuiCb);
            Invoke(AttachCb, new object[]{pDev});
        }

        private void DeviceAttachGuiCb(%NAME%_Device pDev)
        {
            lblNumDevices.Text =
                uDevManager.GetNumOfDevicesAttached().ToString();
            DeviceTabPage tabPage = new DeviceTabPage(this, ref pDev);
            tabDevices.Controls.Add(tabPage);
        }

        private void UserDeviceDetach(%NAME%_Device pDev)
        {
            D_DETACH_GUI_CALLBACK DetachCb = new
                D_DETACH_GUI_CALLBACK(DeviceDetachGuiCb);
            Invoke(DetachCb, new object[]{pDev});
        }

        private void DeviceDetachGuiCb(%NAME%_Device pDev)
        {
            int numTabs = tabDevices.TabCount;
            DeviceTabPage temp;

            lblNumDevices.Text =
                uDevManager.GetNumOfDevicesAttached().ToString();
            for (int i = 0; i < numTabs; i++)
            {
                temp = (DeviceTabPage)tabDevices.TabPages[i];

                if (pDev == temp.GetUsbDev())
                {
                    tabDevices.Controls.Remove(temp);
                    break;
                }
            }
        }

        private void %LNAME%_Load(object sender, System.EventArgs e)
        {
            D_USER_ATTACH_CALLBACK dDeviceAttachCb = new
                D_USER_ATTACH_CALLBACK(UserDeviceAttach);
            D_USER_DETACH_CALLBACK dDeviceDetachCb = new
                D_USER_DETACH_CALLBACK(UserDeviceDetach);

            uDevManager = new %NAME%_DeviceManager(dDeviceAttachCb,
                dDeviceDetachCb, DEFAULT_VENDOR_ID, DEFAULT_PRODUCT_ID,
                DEFAULT_DRIVER_NAME, DEFAULT_LICENSE_STRING);
            UpdateButtons();
        }

        private void %LNAME%_Closing(object eventSender,
            System.EventArgs eventArgs)
        {
            Label lblClose = new Label();
            lblClose.Text = string.Concat("Please wait until ", APP_LNAME,
                ".", Environment.NewLine, "shuts down...");
            lblClose.Font = new Font(lblClose.Font.FontFamily, 18,
                FontStyle.Bold);
            lblClose.TextAlign = ContentAlignment.MiddleLeft;
            lblClose.Size = new Size(400, 200);
            lblClose.BorderStyle = BorderStyle.None;
            lblClose.Location = new Point(200, 100);

            DisableButtons();
            tabDevices.Visible = false;
            this.Controls.Add(lblClose);
            Refresh();

            uDevManager.Dispose();
        }

        public DeviceTabPage GetActiveTab()
        {
            if (tabDevices.TabCount > 0)
            {
                return (DeviceTabPage)tabDevices.GetControl(
                    tabDevices.SelectedIndex);
            }
            return null;
        }

        private void tabDevices_SelectedIndexChanged(object sender,
            System.EventArgs e)
        {
            UpdateButtons();
        }

        private void btLogClear_Click(object sender, System.EventArgs e)
        {
            txtLog.Clear();
        }

        private void btExit_Click(object sender, System.EventArgs e)
        {
            Close();
            Dispose();
        }

        private void DisableButtons()
        {
            btPipeWrite.Enabled = false;
            btPipeRead.Enabled = false;
            btPipeListen.Enabled = false;
            btPipeReset.Enabled = false;
            btActiveAltSetChange.Enabled = false;
        }

        public void UpdateButtons()
        {
            if (tabDevices.InvokeRequired)
            {
                safeButtonsAccess cb = new safeButtonsAccess(UpdateButtons);
                this.Invoke(cb);
            }
            else
            {
                if (uDevManager.GetNumOfDevicesAttached() == 0)
                {
                    DisableButtons();
                    return;
                }

                DeviceTabPage tabPage = GetActiveTab();
                if (tabPage == null)
                    return;

                %NAME%_Pipe Pipe = tabPage.GetActivePipe();
                btPipeWrite_Update(Pipe);
                btPipeRead_Update(Pipe);
                btPipeListen_Update(Pipe);
                btPipeReset_Update(Pipe);
                btActiveAltSetChange_Update(tabPage);
            }
        }

        private void btPipeWrite_Update(%NAME%_Pipe Pipe)
        {
            btPipeWrite.Enabled = !Pipe.IsPipeDirectionIn();
            btPipeWrite.Text = (Pipe.IsInUse() && btPipeWrite.Enabled) ?
                "Stop &Writing" : "&Write To Pipe";
        }

        private void btPipeRead_Update(%NAME%_Pipe Pipe)
        {
            btPipeRead.Enabled = !Pipe.IsPipeDirectionOut() &&
                !Pipe.IsContiguous();

            if (Pipe.IsInUse() && btPipeRead.Enabled)
                btPipeRead.Text = "Stop &Reading";
            else
                btPipeRead.Text = "&Read From Pipe";
        }

        private void btPipeListen_Update(%NAME%_Pipe Pipe)
        {
            btPipeListen.Enabled = !(Pipe.IsPipeDirectionOut() ||
                Pipe.IsControlPipe()) && !(Pipe.IsInUse() &&
                !Pipe.IsContiguous());

            if (Pipe.IsInUse() && btPipeListen.Enabled)
                btPipeListen.Text = "Stop &Listening";
            else
                btPipeListen.Text = "&Listen To Pipe";
        }

        private void btPipeReset_Update(%NAME%_Pipe Pipe)
        {
            btPipeReset.Enabled = !Pipe.IsControlPipe() && !Pipe.IsInUse();
        }

        public void btActiveAltSetChange_Update(DeviceTabPage tabPage)
        {
            DWORD dwNumOfAltSettings =
                tabPage.GetUsbDev().GetNumOfAlternateSettingsTotal();

            btActiveAltSetChange.Enabled = ((dwNumOfAltSettings > 1) &&
                !(tabPage.GetUsbDev().IsDeviceTransferring()));
        }

        private void btActiveAltSetChange_Click(object sender,
            System.EventArgs e)
        {
            DeviceTabPage activePage = GetActiveTab();

            if (activePage == null)
                return;

            %NAME%_Device currUsbDev = activePage.GetUsbDev();
            DialogResult result;

            FormChangeSettings frmChangeSettings = new
                FormChangeSettings(ref currUsbDev);

            result = frmChangeSettings.ShowDialog();
            if (result == DialogResult.OK)
            {
                DWORD newInterface = frmChangeSettings.GetChosenInterface();
                DWORD newSetting = frmChangeSettings.GetChosenSetting();
                DWORD dwStatus = currUsbDev.ChangeAlternateSetting(newInterface,
                    newSetting);

                if (dwStatus != (DWORD)wdu_err.WD_STATUS_SUCCESS)
                {
                    ErrMsg(string.Format("Failed to change the device's " +
                        "setting to the one chosen: {0}",
                        utils.Stat2Str(dwStatus)));
                }
                else
                {
                    activePage.UpdateAlternateSettings();
                }
            }
        }

        private void TransferCompletion(%NAME%_Pipe pipe)
        {
            UpdateButtons();

            if (pipe.GetTransferStatus() == (DWORD)wdu_err.WD_STATUS_SUCCESS)
            {
                TraceMsg(string.Format("Transfer completed successfully! " +
                    "Data {0}: {1} ", (pipe.GetfRead()) ? "read" : "written",
                    DisplayHexBuffer(pipe.GetBuffer(),
                    pipe.GetBytesTransferred())));
            }
            else
            {
                ErrMsg(string.Format("Transfer Failed! Error {0}: {1} ",
                    pipe.GetTransferStatus().ToString("X"),
                    utils.Stat2Str(pipe.GetTransferStatus())));
            }
        }

        private void ListenCompletion(%NAME%_Pipe pipe)
        {
            DWORD dwStatus = pipe.GetTransferStatus();
            bool IsListenStopped = (dwStatus == (DWORD)wdu_err.WD_IRP_CANCELED)
                && !pipe.IsContiguous();

            if (dwStatus != (DWORD)wdu_err.WD_STATUS_SUCCESS &&
                !IsListenStopped)
            {
                ErrMsg(string.Format("Transfer Failed! Error {0}: {1} ",
                    dwStatus.ToString("X"), utils.Stat2Str(dwStatus)));
                UpdateButtons();
            }
            else
            {
                TraceMsg(string.Format("{0}",
                    DisplayHexBuffer(pipe.GetBuffer(),
                    pipe.GetBytesTransferred())));
            }

        }

        private void SingleTransfer(bool fRead)
        {
            DeviceTabPage activePage = GetActiveTab();
            if (activePage == null)
                return;

            %NAME%_Pipe activePipe = activePage.GetActivePipe();
            DWORD dwPipeNum = activePage.GetActivePipeNum();
            bool fControl = activePipe.IsControlPipe();
            DWORD dwBuffSize=0;
            byte[] buffer = null;
            byte[] pSetupPacket = new byte[8];
            DWORD dwOptions = 0;

            FormTransfers frmTransfers = new FormTransfers(fRead, fControl);

            if (frmTransfers.GetInput(ref dwBuffSize, ref buffer,
                ref pSetupPacket) == false)
                return;

            TraceMsg(string.Format("began {0} {1} pipe number 0x{2:X}",
                fRead ? "reading from" : "writing to",
                activePage.GetUsbDev().DeviceDescription(), dwPipeNum));
            if (activePipe.IsControlPipe())
            {
                DWORD dwBytesTransferred = 0;
                activePipe.UsbPipeTransfer(fRead, dwOptions, buffer,
                    dwBuffSize, ref dwBytesTransferred, pSetupPacket, TIME_OUT);
                TransferCompletion(activePipe);
            }
            else
            {
                activePipe.UsbPipeTransferAsync(fRead, dwOptions, buffer,
                    dwBuffSize, TIME_OUT,
                    new D_USER_TRANSFER_COMPLETION(TransferCompletion));
            }
        }

        private string DisplayHexBuffer(byte[] buff, DWORD dwBuffSize)
        {
            string display = "";

            for (DWORD i = 0; i < dwBuffSize; ++i)
                display = string.Concat(display, buff[i].ToString("X"), " ");

            display = string.Concat(display, Environment.NewLine);
            return display;
        }

        private void btPipeRead_Click(object sender, System.EventArgs e)
        {
            DeviceTabPage activeTab =  GetActiveTab();
            if (activeTab == null)
                    return;

            %NAME%_Pipe activePipe = activeTab.GetActivePipe();

            if (activePipe.IsInUse())
                activePipe.HaltTransferOnPipe();
            else
                SingleTransfer(true);
            UpdateButtons();
        }

        private void btPipeWrite_Click(object sender, System.EventArgs e)
        {
            DeviceTabPage activeTab =  GetActiveTab();
            if (activeTab == null)
                    return;

            %NAME%_Pipe activePipe = activeTab.GetActivePipe();

            if (activePipe.IsInUse())
                activePipe.HaltTransferOnPipe();
            else
                SingleTransfer(false);

            UpdateButtons();
        }

        private void SafeLogText(string sMsg)
        {
            // InvokeRequired compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (txtLog.InvokeRequired)
            {

                safeLogTextCallBack cb = new safeLogTextCallBack(SafeLogText);
                this.Invoke(cb, new object[] { sMsg });
            }
            else
            {
                txtLog.AppendText(sMsg);
            }
        }

        public void TraceMsg(string sMsg)
        {
            SafeLogText(sMsg);
            SafeLogText(Environment.NewLine);
        }

        public void ErrMsg(string sMsg)
        {
            SafeLogText(sMsg);
            SafeLogText(Environment.NewLine);
        }

        private void btPipeListen_Click(object sender, System.EventArgs e)
        {
            DeviceTabPage activeTab =  GetActiveTab();

            if (activeTab == null)
                    return;

            %NAME%_Pipe activePipe = activeTab.GetActivePipe();

            if (activePipe.IsInUse())
            {
                activePipe.SetContiguous(false);
                activePipe.HaltTransferOnPipe();
            }
            else
            {
                DWORD dwOptions = 0;
                activePipe.SetContiguous(true);
                TraceMsg(string.Format("began listening to {0} pipe number " +
                    "0x{1:X}", activeTab.GetUsbDev().DeviceDescription(),
                    activePipe.GetPipeNum()));
                activePipe.UsbPipeTransferAsync(true, dwOptions , TIME_OUT,
                    new D_USER_TRANSFER_COMPLETION(ListenCompletion));
            }
            UpdateButtons();
        }

        private void btPipeReset_Click(object sender, System.EventArgs e)
        {
            DeviceTabPage activeTab =  GetActiveTab();
            if (activeTab == null)
                return;

            %NAME%_Pipe activePipe = activeTab.GetActivePipe();
            TraceMsg(string.Format("reseting {0} pipe number 0x{1:X}",
                activeTab.GetUsbDev().DeviceDescription(),
                activePipe.GetPipeNum()));
            activePipe.ResetPipe();
        }
    }
}

===BEGIN MODULE diag/DeviceTabPage.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;

namespace Jungo.%LNAME%_diag
{
    public class DeviceTabPage : System.Windows.Forms.TabPage
    {
        private %NAME%_Device usbDev;
        private System.Windows.Forms.ListView pipesListView;
        private int iSelectedPipeIndex = -1;
        private %LNAME% ParentForm;

        public DeviceTabPage(%LNAME% Parent,
            ref %NAME%_Device pUsbDev)
        {
            ParentForm = Parent;
            pipesListView = new System.Windows.Forms.ListView();
            usbDev = pUsbDev;

            this.RightToLeft = RightToLeft.No;
            this.Text = usbDev.DeviceDescription();
            CreateListViewSettings();
            UpdatePipesListView();
            this.Controls.Add(pipesListView);
            this.pipesListView.SelectedIndexChanged += new
                System.EventHandler(this.PipeListSelectedIndexChanged);

        }

        private void CreateListViewSettings()
        {
            pipesListView.Location = new Point(8, 8);
            pipesListView.Name = "pipesListView";
            pipesListView.HideSelection = false;
            pipesListView.Size = new System.Drawing.Size(
                ParentForm.tabDevices.Width - 16,
                ParentForm.tabDevices.Height - 16);
            pipesListView.View = View.Details;
            pipesListView.MultiSelect = false;
            pipesListView.GridLines = false;
            pipesListView.FullRowSelect = true;
            pipesListView.LabelEdit = false;
            pipesListView.HeaderStyle = ColumnHeaderStyle.Nonclickable;
            pipesListView.Columns.Add("Pipe", pipesListView.Width / 4 - 1,
                HorizontalAlignment.Left);
            pipesListView.Columns.Add("Type", pipesListView.Width / 4 - 1,
                HorizontalAlignment.Left);
            pipesListView.Columns.Add("Direction", pipesListView.Width / 4 - 1,
                HorizontalAlignment.Left);
            pipesListView.Columns.Add("Max Packet Size",
                pipesListView.Width / 4 - 1, HorizontalAlignment.Left);

        }

        public void UpdatePipesListView()
        {
            int index = 0;

            pipesListView.BeginUpdate();
            pipesListView.Items.Clear();

            for (index = 0; index < usbDev.GetpPipesList().Count; ++index)
            {
                %NAME%_Pipe currUsbPipe =
                    (%NAME%_Pipe)(usbDev.GetpPipesList())[index];
                ListViewItem pipeListItem = new
                    ListViewItem(string.Format("0x{0}",
                    currUsbPipe.GetPipeNum().ToString("X")));

                pipeListItem.SubItems.Add(PipeTypeToString(currUsbPipe));
                pipeListItem.SubItems.Add(PipeDirectionToString(currUsbPipe));
                pipeListItem.SubItems.Add(string.Concat("0x",
                    (currUsbPipe.GetPipeMaxPacketSz()).ToString("X")));
                pipesListView.Items.Add(pipeListItem);
            }

            pipesListView.Items[0].Selected = true;
            pipesListView.EndUpdate();
        }

        void PipeListSelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (pipesListView.SelectedItems.Count <= 0)
                return;
            int Index = pipesListView.SelectedItems[0].Index;
            if (iSelectedPipeIndex == -1 || iSelectedPipeIndex != Index)
            {
                iSelectedPipeIndex = Index;
                if (ParentForm.GetActiveTab() == this)
                    ParentForm.UpdateButtons();
            }
        }

        public void UpdateAlternateSettings()
        {
            UpdatePipesListView();
            this.Text = usbDev.DeviceDescription();
        }

        public %NAME%_Pipe GetActivePipe()
        {
            return (%NAME%_Pipe)usbDev.GetpPipesList()[iSelectedPipeIndex];

        }

        public uint GetActivePipeNum()
        {
            return ((%NAME%_Pipe)usbDev.GetpPipesList()[iSelectedPipeIndex]).
                GetPipeNum();
        }

        public %NAME%_Device GetUsbDev()
        {
            return usbDev;
        }

        public void SetUsbDev(ref %NAME%_Device newUsbDev)
        {
            usbDev = newUsbDev;

        }

        private string PipeTypeToString(%NAME%_Pipe pipe)
        {
            string strPipeType;

            if (pipe.IsControlPipe())
                strPipeType = "Control";

            else if (pipe.IsBulkPipe())
                strPipeType = "Bulk";

            else if (pipe.IsInterruptPipe())
                strPipeType = "Interrupt";

            else if (pipe.IsIsochronousPipe())
                strPipeType = "Isochronous";

            else
                strPipeType = "N/A";

            return strPipeType;
        }

        private string PipeDirectionToString(%NAME%_Pipe pipe)
        {
            string strPipeDirection;

            if (pipe.IsPipeDirectionIn())
                strPipeDirection = "In";

            else if (pipe.IsPipeDirectionOut())
                strPipeDirection = "Out";

            else if (pipe.IsPipeDirectionInOut())
                strPipeDirection = "In/Out";

            else
                strPipeDirection = "N/A";

            return strPipeDirection;
        }
    };
}


===BEGIN MODULE diag/FormTransfers.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;

using DWORD = System.UInt32;

namespace Jungo.%LNAME%_diag
{
    public class FormTransfers : System.Windows.Forms.Form
    {
        internal System.Windows.Forms.Panel pnlData;
        internal System.Windows.Forms.TextBox txtData;
        internal System.Windows.Forms.Label lblData;
        internal System.Windows.Forms.Panel pnlBufSize;
        internal System.Windows.Forms.TextBox txtBufSize;
        internal System.Windows.Forms.Label lblBufSize;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Panel pnlSetupPacket;
        internal System.Windows.Forms.TextBox txtwLength;
        internal System.Windows.Forms.Label lblwLength;
        internal System.Windows.Forms.TextBox txtwIndex;
        internal System.Windows.Forms.Label lblwIndex;
        internal System.Windows.Forms.TextBox txtwValue;
        internal System.Windows.Forms.Label lblwValue;
        internal System.Windows.Forms.TextBox txtRequest;
        internal System.Windows.Forms.Label lblRequest;
        internal System.Windows.Forms.TextBox txtType;
        internal System.Windows.Forms.Label lblType;
        internal System.Windows.Forms.Label lblSetupPacket;
        internal System.Windows.Forms.Button btSubmit;

        private System.ComponentModel.Container components = null;

        private bool m_bIsControl;
        private bool m_bIsRead;
        private DWORD m_dwBuffSize;
        private byte[] m_buffer;
        private byte[] m_pSetupPacket = new byte[8];

        public FormTransfers(bool bIsRead, bool bIsControl)
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            pnlBufSize.Enabled = !bIsControl;
            txtBufSize.Enabled = !bIsControl;

            pnlData.Enabled = !bIsRead;
            txtData.Enabled = !bIsRead;

            pnlSetupPacket.Enabled = bIsControl;
            txtRequest.Enabled = bIsControl;
            txtType.Enabled = bIsControl;
            txtwIndex.Enabled = bIsControl;
            txtwLength.Enabled = bIsControl;
            txtwValue.Enabled = bIsControl;
            m_bIsControl = bIsControl;
            m_bIsRead = bIsRead;
        }

        protected override void Dispose(bool disposing)
        {

            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code
        private void InitializeComponent()
        {
            pnlData = new System.Windows.Forms.Panel();
            txtData = new System.Windows.Forms.TextBox();
            lblData = new System.Windows.Forms.Label();
            pnlBufSize = new System.Windows.Forms.Panel();
            txtBufSize = new System.Windows.Forms.TextBox();
            lblBufSize = new System.Windows.Forms.Label();
            btCancel = new System.Windows.Forms.Button();
            pnlSetupPacket = new System.Windows.Forms.Panel();
            txtwLength = new System.Windows.Forms.TextBox();
            lblwLength = new System.Windows.Forms.Label();
            txtwIndex = new System.Windows.Forms.TextBox();
            lblwIndex = new System.Windows.Forms.Label();
            txtwValue = new System.Windows.Forms.TextBox();
            lblwValue = new System.Windows.Forms.Label();
            txtRequest = new System.Windows.Forms.TextBox();
            lblRequest = new System.Windows.Forms.Label();
            txtType = new System.Windows.Forms.TextBox();
            lblType = new System.Windows.Forms.Label();
            lblSetupPacket = new System.Windows.Forms.Label();
            btSubmit = new System.Windows.Forms.Button();
            pnlData.SuspendLayout();
            pnlBufSize.SuspendLayout();
            pnlSetupPacket.SuspendLayout();
            SuspendLayout();

            pnlData.Controls.Add(txtData);
            pnlData.Controls.Add(lblData);
            pnlData.Location = new System.Drawing.Point(16, 46);
            pnlData.Name = "pnlData";
            pnlData.Size = new System.Drawing.Size(360, 32);
            pnlData.TabIndex = 21;

            txtData.Enabled = false;
            txtData.Location = new System.Drawing.Point(112, 8);
            txtData.Name = "txtData";
            txtData.Size = new System.Drawing.Size(240, 20);
            txtData.TabIndex = 3;
            txtData.Text = "";

            lblData.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, ((System.Drawing.FontStyle)((
                System.Drawing.FontStyle.Bold |
                System.Drawing.FontStyle.Underline))),
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblData.Location = new System.Drawing.Point(8, 8);
            lblData.Name = "lblData";
            lblData.Size = new System.Drawing.Size(64, 16);
            lblData.TabIndex = 2;
            lblData.Text = "Data (hex):";

            pnlBufSize.Controls.Add(txtBufSize);
            pnlBufSize.Controls.Add(lblBufSize);
            pnlBufSize.Location = new System.Drawing.Point(16, 14);
            pnlBufSize.Name = "pnlBufSize";
            pnlBufSize.Size = new System.Drawing.Size(168, 32);
            pnlBufSize.TabIndex = 20;

            txtBufSize.Location = new System.Drawing.Point(112, 8);
            txtBufSize.Name = "txtBufSize";
            txtBufSize.Size = new System.Drawing.Size(40, 20);
            txtBufSize.TabIndex = 1;
            txtBufSize.Text = "";
            txtBufSize.TextAlign =
                System.Windows.Forms.HorizontalAlignment.Center;

            lblBufSize.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, ((System.Drawing.FontStyle)((
                System.Drawing.FontStyle.Bold |
                System.Drawing.FontStyle.Underline))),
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblBufSize.Location = new System.Drawing.Point(8, 8);
            lblBufSize.Name = "lblBufSize";
            lblBufSize.Size = new System.Drawing.Size(96, 16);
            lblBufSize.TabIndex = 0;
            lblBufSize.Text = "Buffer size (hex):";

            btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            btCancel.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            btCancel.Location = new System.Drawing.Point(112, 166);
            btCancel.Name = "btCancel";
            btCancel.Size = new System.Drawing.Size(75, 32);
            btCancel.TabIndex = 19;
            btCancel.Text = "Cancel";

            pnlSetupPacket.Controls.Add(txtwLength);
            pnlSetupPacket.Controls.Add(lblwLength);
            pnlSetupPacket.Controls.Add(txtwIndex);
            pnlSetupPacket.Controls.Add(lblwIndex);
            pnlSetupPacket.Controls.Add(txtwValue);
            pnlSetupPacket.Controls.Add(lblwValue);
            pnlSetupPacket.Controls.Add(txtRequest);
            pnlSetupPacket.Controls.Add(lblRequest);
            pnlSetupPacket.Controls.Add(txtType);
            pnlSetupPacket.Controls.Add(lblType);
            pnlSetupPacket.Controls.Add(lblSetupPacket);
            pnlSetupPacket.Location = new System.Drawing.Point(16, 78);
            pnlSetupPacket.Name = "pnlSetupPacket";
            pnlSetupPacket.Size = new System.Drawing.Size(312, 72);
            pnlSetupPacket.TabIndex = 17;

            txtwLength.Enabled = false;
            txtwLength.Location = new System.Drawing.Point(248, 48);
            txtwLength.MaxLength = 4;
            txtwLength.Name = "txtwLength";
            txtwLength.Size = new System.Drawing.Size(48, 20);
            txtwLength.TabIndex = 8;
            txtwLength.Text = "";
            txtwLength.TextAlign =
                System.Windows.Forms.HorizontalAlignment.Center;
            txtwLength.TextChanged += new
                System.EventHandler(txtwLength_TextChanged);

            lblwLength.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblwLength.Location = new System.Drawing.Point(248, 32);
            lblwLength.Name = "lblwLength";
            lblwLength.Size = new System.Drawing.Size(48, 16);
            lblwLength.TabIndex = 12;
            lblwLength.Text = "wLength";

            txtwIndex.Enabled = false;
            txtwIndex.Location = new System.Drawing.Point(184, 48);
            txtwIndex.MaxLength = 4;
            txtwIndex.Name = "txtwIndex";
            txtwIndex.Size = new System.Drawing.Size(48, 20);
            txtwIndex.TabIndex = 7;
            txtwIndex.Text = "";
            txtwIndex.TextAlign =
                System.Windows.Forms.HorizontalAlignment.Center;
            txtwIndex.TextChanged += new
                System.EventHandler(txtwIndex_TextChanged);

            lblwIndex.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblwIndex.Location = new System.Drawing.Point(184, 32);
            lblwIndex.Name = "lblwIndex";
            lblwIndex.Size = new System.Drawing.Size(48, 16);
            lblwIndex.TabIndex = 11;
            lblwIndex.Text = "wIndex";

            txtwValue.Enabled = false;
            txtwValue.Location = new System.Drawing.Point(120, 48);
            txtwValue.MaxLength = 4;
            txtwValue.Name = "txtwValue";
            txtwValue.Size = new System.Drawing.Size(48, 20);
            txtwValue.TabIndex = 6;
            txtwValue.Text = "";
            txtwValue.TextAlign =
                System.Windows.Forms.HorizontalAlignment.Center;
            txtwValue.TextChanged += new
                System.EventHandler(txtwValue_TextChanged);

            lblwValue.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblwValue.Location = new System.Drawing.Point(120, 32);
            lblwValue.Name = "lblwValue";
            lblwValue.Size = new System.Drawing.Size(48, 16);
            lblwValue.TabIndex = 10;
            lblwValue.Text = "wValue";

            txtRequest.Enabled = false;
            txtRequest.Location = new System.Drawing.Point(64, 48);
            txtRequest.MaxLength = 2;
            txtRequest.Name = "txtRequest";
            txtRequest.Size = new System.Drawing.Size(32, 20);
            txtRequest.TabIndex = 5;
            txtRequest.Text = "";
            txtRequest.TextAlign =
                System.Windows.Forms.HorizontalAlignment.Center;
            txtRequest.TextChanged += new
                System.EventHandler(txtRequest_TextChanged);

            lblRequest.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblRequest.Location = new System.Drawing.Point(56, 32);
            lblRequest.Name = "lblRequest";
            lblRequest.Size = new System.Drawing.Size(48, 16);
            lblRequest.TabIndex = 9;
            lblRequest.Text = "Request";

            txtType.Enabled = false;
            txtType.Location = new System.Drawing.Point(8, 48);
            txtType.MaxLength = 2;
            txtType.Name = "txtType";
            txtType.Size = new System.Drawing.Size(32, 20);
            txtType.TabIndex = 4;
            txtType.Text = "";
            txtType.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            txtType.TextChanged += new System.EventHandler(txtType_TextChanged);

            lblType.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblType.Location = new System.Drawing.Point(8, 32);
            lblType.Name = "lblType";
            lblType.Size = new System.Drawing.Size(32, 16);
            lblType.TabIndex = 3;
            lblType.Text = "Type";

            lblSetupPacket.Font = new
                System.Drawing.Font("Microsoft Sans Serif", 8.25F,
                ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold |
                System.Drawing.FontStyle.Underline))),
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            lblSetupPacket.Location = new System.Drawing.Point(8, 8);
            lblSetupPacket.Name = "lblSetupPacket";
            lblSetupPacket.Size = new System.Drawing.Size(296, 16);
            lblSetupPacket.TabIndex = 17;
            lblSetupPacket.Text = "Setup Packet:";

            btSubmit.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            btSubmit.Location = new System.Drawing.Point(24, 166);
            btSubmit.Name = "btSubmit";
            btSubmit.Size = new System.Drawing.Size(75, 32);
            btSubmit.TabIndex = 18;
            btSubmit.Text = "Submit";
            btSubmit.Click += new System.EventHandler(btSubmit_Click);

            AcceptButton = btSubmit;
            AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            CancelButton = btCancel;
            ClientSize = new System.Drawing.Size(384, 213);
            Controls.Add(pnlData);
            Controls.Add(pnlBufSize);
            Controls.Add(btCancel);
            Controls.Add(pnlSetupPacket);
            Controls.Add(btSubmit);
            Name = "FormTransfers";
            StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            Text = "Read/Write device's Pipes";
            pnlData.ResumeLayout(false);
            pnlBufSize.ResumeLayout(false);
            pnlSetupPacket.ResumeLayout(false);
            ResumeLayout(false);

        }
        #endregion

        public bool GetInput(ref DWORD dwBuffSize, ref byte[] buffer,
            ref byte[] pSetupPacket)
        {
            DialogResult result = DialogResult.Retry;

            while ((result = ShowDialog()) == DialogResult.Retry);

            if (result != DialogResult.OK)
                return false;

            dwBuffSize = m_dwBuffSize;
            buffer = m_buffer;
            pSetupPacket = m_pSetupPacket;

            return true;
        }

        private void TranslateInput()
        {
            if (m_bIsControl)
            {
                GetSetupPacketData();
                m_dwBuffSize = Convert.ToUInt32(txtwLength.Text, 16);
                m_buffer = new byte[m_dwBuffSize];
            }
            else
            {
                m_dwBuffSize = Convert.ToUInt32(txtBufSize.Text, 16);
                m_buffer = new byte[m_dwBuffSize];
            }

            if (!m_bIsRead)
            {
                //padding the first bytes if necessary
                string str = PadBuffer(txtData.Text, txtData.Text.Length,
                    2 * (int)m_dwBuffSize);

                for (int i = 0; i < m_dwBuffSize; ++i)
                  m_buffer[i] = Convert.ToByte(str.Substring(2 * i, 2), 16);
            }
        }

        private string PadBuffer(string str, int fromIndex, int toIndex)
        {
            for (int i=fromIndex; i < toIndex; ++i)
                str = string.Concat("0", str);

            return str;
        }

        private void GetSetupPacketData()
        {
            string type = PadBuffer(txtType.Text, txtType.Text.Length, 2);
            string request =
                    PadBuffer(txtRequest.Text, txtRequest.Text.Length, 2);
            string wValue = PadBuffer(txtwValue.Text, txtwValue.Text.Length, 4);
            string wIndex = PadBuffer(txtwIndex.Text, txtwIndex.Text.Length, 4);
            string wLength =
                    PadBuffer(txtwLength.Text, txtwLength.Text.Length, 4);

            m_pSetupPacket[0] = Convert.ToByte(type, 16);
            m_pSetupPacket[1] = Convert.ToByte(request, 16);
            m_pSetupPacket[2] = Convert.ToByte(wValue.Substring(2,2), 16);
            m_pSetupPacket[3] = Convert.ToByte(wValue.Substring(0,2), 16);
            m_pSetupPacket[4] = Convert.ToByte(wIndex.Substring(2,2), 16);
            m_pSetupPacket[5] = Convert.ToByte(wIndex.Substring(0,2), 16);
            m_pSetupPacket[6] = Convert.ToByte(wLength.Substring(2,2), 16);
            m_pSetupPacket[7] = Convert.ToByte(wLength.Substring(0,2), 16);
        }

        private void btSubmit_Click(object sender, System.EventArgs e)
        {
            DialogResult = DialogResult.OK;
            try
            {
                TranslateInput();
            }
            catch
            {
                MessageBox.Show(string.Concat(
                    "The text is not a valid hex number.",
                    "Please re-enter, or press Cancel to exit"),
                    "Input Entry Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                DialogResult = DialogResult.Retry;
            }
        }

        private void SetupPacketInputChanged(TextBox txtInput)
        {
            if (txtInput.Text.Length == txtInput.MaxLength)
                SelectNextControl(txtInput, true, true, true, false);
        }

        private void txtType_TextChanged(object sender, System.EventArgs e)
        {
            SetupPacketInputChanged(txtType);
        }

        private void txtRequest_TextChanged(object sender, System.EventArgs e)
        {
            SetupPacketInputChanged(txtRequest);
        }

        private void txtwValue_TextChanged(object sender, System.EventArgs e)
        {
            SetupPacketInputChanged(txtwValue);
        }

        private void txtwIndex_TextChanged(object sender, System.EventArgs e)
        {
            SetupPacketInputChanged(txtwIndex);
        }

        private void txtwLength_TextChanged(object sender, System.EventArgs e)
        {
            SetupPacketInputChanged(txtwLength);
        }
    }
}

===BEGIN MODULE diag/FormChangeSettings.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;

using DWORD = System.UInt32;

namespace Jungo.%LNAME%_diag
{
    public class FormChangeSettings : System.Windows.Forms.Form
    {
        internal System.Windows.Forms.ComboBox cmboAltSettings;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Button btSubmit;

        private System.ComponentModel.Container components = null;
        private DWORD[,] settingsArr;
        private DWORD dwChosenInterface;
        private DWORD dwChosenSetting;

        public FormChangeSettings(ref %NAME%_Device usbDev)
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();
            DWORD numOfAltSettings = usbDev.GetNumOfAlternateSettingsTotal();
            DWORD currInterfaceIndex = (DWORD)usbDev.GetCurrInterfaceIndex();
            DWORD currAltSetting = usbDev.GetCurrAlternateSettingNum();
            settingsArr =  new DWORD[numOfAltSettings,2];
            DWORD currIndex = 0;
            int i = 0;

            for (DWORD interfac = 0; interfac < usbDev.GetNumOfInteraces();
                ++interfac)
            {
                DWORD dwInterfaceNumber =
                    usbDev.GetInterfaceNumberByIndex(interfac);
                for (DWORD altSetting = 0; altSetting <
                    usbDev.GetNumOfAlternateSettingsPerInterface(
                    dwInterfaceNumber); ++altSetting)
                {
                    cmboAltSettings.Items.Add("Interface " +
                        dwInterfaceNumber.ToString() +
                        ",  Alternate Setting " + altSetting.ToString());
                    settingsArr[i, 0] = dwInterfaceNumber;
                    settingsArr[i, 1] = altSetting;
                    ++i;

                    if (interfac <= currInterfaceIndex &&
                        altSetting < currAltSetting)
                    {
                        ++currIndex;
                    }
                }
            }

            cmboAltSettings.SelectedIndex = (int)currIndex;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code
        private void InitializeComponent()
        {
            btCancel = new System.Windows.Forms.Button();
            btSubmit = new System.Windows.Forms.Button();
            cmboAltSettings = new System.Windows.Forms.ComboBox();
            SuspendLayout();


            btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            btCancel.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            btCancel.Location = new System.Drawing.Point(120, 88);
            btCancel.Name = "btCancel";
            btCancel.Size = new System.Drawing.Size(64, 24);
            btCancel.TabIndex = 19;
            btCancel.Text = "Cancel";

            btSubmit.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            btSubmit.Location = new System.Drawing.Point(32, 88);
            btSubmit.Name = "btSubmit";
            btSubmit.Size = new System.Drawing.Size(64, 24);
            btSubmit.TabIndex = 18;
            btSubmit.Text = "Submit";
            btSubmit.Click += new System.EventHandler(btSubmit_Click);

            cmboAltSettings.ItemHeight = 13;
            cmboAltSettings.Location = new System.Drawing.Point(32, 32);
            cmboAltSettings.Name = "cmboAltSettings";
            cmboAltSettings.Size = new System.Drawing.Size(152, 21);
            cmboAltSettings.TabIndex = 25;
            cmboAltSettings.Text = "Choose Setting";

            AcceptButton = btSubmit;
            AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            CancelButton = btCancel;
            ClientSize = new System.Drawing.Size(232, 149);
            Controls.Add(cmboAltSettings);
            Controls.Add(btCancel);
            Controls.Add(btSubmit);
            Name = "FormChangeSettings";
            Text = "Change device's Settings";
            ResumeLayout(false);
        }
        #endregion

        public DWORD GetChosenInterface()
        {
            return dwChosenInterface;
        }

        public DWORD GetChosenSetting()
        {
            return dwChosenSetting;
        }

        private void btSubmit_Click(object sender, System.EventArgs e)
        {
            int index = cmboAltSettings.SelectedIndex;
            dwChosenInterface = settingsArr[index, 0];
            dwChosenSetting = settingsArr[index, 1];
            DialogResult = DialogResult.OK;
        }
    }
}
%/USB%

%PCI%

===BEGIN MODULE diag/%NAME%_diag.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Runtime.InteropServices;
using System.Threading;

using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;
using wdc_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using DWORD = System.UInt32;
using WORD = System.UInt16;
using BYTE = System.Byte;
using BOOL = System.Boolean;
using UINT32 = System.UInt32;
using UINT64 = System.UInt64;
using WDC_DEVICE_HANDLE = System.IntPtr;
using WDC_ADDR_SIZE = System.UInt32;
using HANDLE = System.IntPtr;

namespace Jungo.%LNAME%_diag
{
    public enum RW
    {
        READ = 0,
        WRITE = 1,
        READ_ALL = 2
    }

    public enum TRANSFER_TYPE
    {
        BLOCK = 0,
        NONBLOCK = 1
    }

    public enum ACTION_TYPE
    {
        CFG = 0,
        RT = 1,
    }

    public class %NAME%_diag : System.Windows.Forms.Form
    {
        private System.ComponentModel.Container components = null;

        private %NAME%_DeviceList pciDevList;
        private Log log;
        private System.Windows.Forms.TextBox txtLog;
        private System.Windows.Forms.MainMenu mainMenu1;
        private System.Windows.Forms.MenuItem menuAddrSpaces;
        private System.Windows.Forms.MenuItem menuEvents;
%_EVENT%
        private System.Windows.Forms.MenuItem menuRegisterEvent;
%/_EVENT%
%NOEVENT%
        private System.Windows.Forms.MenuItem menuEventNotActive;
%/NOEVENT%
        private System.Windows.Forms.MenuItem menuCfgSpace;
        private System.Windows.Forms.MenuItem menuRTRegs;
        private System.Windows.Forms.Label lblLog;
        private System.Windows.Forms.Label lbl%NAME%Dev;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Button btLog;
        private System.Windows.Forms.Button btExit;
        private System.Windows.Forms.ListBox lstBxDevices;
        private System.Windows.Forms.MenuItem menuCfgOffset;
        private System.Windows.Forms.MenuItem menuCfgReg;
        private System.Windows.Forms.MenuItem menuAddrRW;
        private System.Windows.Forms.MenuItem menuRTRegsRW;
        private System.Windows.Forms.MenuItem menuInterrupts;
%INTERRUPT%
        private System.Windows.Forms.MenuItem menuEnableInt;
%/INTERRUPT%
%NOINTERRUPT%
        private System.Windows.Forms.MenuItem menuInterruptNotActive;
%/NOINTERRUPT%
        private System.Windows.Forms.Button btDevice;

        public %NAME%_diag()
        {
            InitializeComponent();

            log = new Log(new Log.TRACE_LOG(TraceLog),
                new Log.ERR_LOG(ErrLog));
            pciDevList = %NAME%_DeviceList.TheDeviceList();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

#region Windows Form Designer generated code
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        private void InitializeComponent()
        {
            this.txtLog = new System.Windows.Forms.TextBox();
            this.lstBxDevices = new System.Windows.Forms.ListBox();
            this.mainMenu1 = new System.Windows.Forms.MainMenu();
            this.menuAddrSpaces = new System.Windows.Forms.MenuItem();
            this.menuAddrRW = new System.Windows.Forms.MenuItem();
            this.menuInterrupts = new System.Windows.Forms.MenuItem();
%INTERRUPT%
            this.menuEnableInt = new System.Windows.Forms.MenuItem();
%/INTERRUPT%
%NOINTERRUPT%
            this.menuInterruptNotActive = new System.Windows.Forms.MenuItem();
%/NOINTERRUPT%
            this.menuEvents = new System.Windows.Forms.MenuItem();
%_EVENT%
            this.menuRegisterEvent = new System.Windows.Forms.MenuItem();
%/_EVENT%
%NOEVENT%
            this.menuEventNotActive = new System.Windows.Forms.MenuItem();
%/NOEVENT%
            this.menuCfgSpace = new System.Windows.Forms.MenuItem();
            this.menuCfgOffset = new System.Windows.Forms.MenuItem();
            this.menuCfgReg = new System.Windows.Forms.MenuItem();
            this.menuRTRegs = new System.Windows.Forms.MenuItem();
            this.menuRTRegsRW = new System.Windows.Forms.MenuItem();
            this.lblLog = new System.Windows.Forms.Label();
            this.lbl%NAME%Dev = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.btLog = new System.Windows.Forms.Button();
            this.btExit = new System.Windows.Forms.Button();
            this.btDevice = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // txtLog
            this.txtLog.AutoSize = false;
            this.txtLog.Location = new System.Drawing.Point(24, 176);
            this.txtLog.Multiline = true;
            this.txtLog.Name = "txtLog";
            this.txtLog.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtLog.Size = new System.Drawing.Size(624, 208);
            this.txtLog.TabIndex = 24;
            this.txtLog.Text = "";
            // lstBxDevices
            this.lstBxDevices.Location = new System.Drawing.Point(24, 80);
            this.lstBxDevices.Name = "lstBxDevices";
            this.lstBxDevices.Size = new System.Drawing.Size(416, 56);
            this.lstBxDevices.TabIndex = 27;
            this.lstBxDevices.SelectedIndexChanged +=
                new System.EventHandler(this.lstBxDevices_SelectedIndexChanged);
            this.lstBxDevices.DoubleClick += new
                System.EventHandler(this.lstBxDevices_DoubleClicked);
            // mainMenu1
            this.mainMenu1.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuAddrSpaces,
                this.menuInterrupts,
                this.menuEvents,
                this.menuCfgSpace,
                this.menuRTRegs});
            // menuAddrSpaces
            this.menuAddrSpaces.Index = 0;
            this.menuAddrSpaces.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuAddrRW});
            this.menuAddrSpaces.Text = "Address Spaces";
            // menuAddrRW
            this.menuAddrRW.Index = 0;
            this.menuAddrRW.Text = "Read/Write Address Space";
            this.menuAddrRW.Click += new
                System.EventHandler(this.menuAddrRW_Click);
            // menuInterrupts
            this.menuInterrupts.Index = 1;
            this.menuInterrupts.Text = "Interrupts";
%NOINTERRUPT%
            this.menuInterrupts.Visible = false;
            this.menuEvents.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuInterruptNotActive});
            this.menuInterruptNotActive.Index = 0;
            this.menuInterruptNotActive.Text = "Not Active";
%/NOINTERRUPT%
%INTERRUPT%
            this.menuInterrupts.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuEnableInt});
            this.menuInterrupts.Select +=
                new System.EventHandler(this.menuInterrupts_Select);
            // menuEnableInt
            this.menuEnableInt.Index = 0;
            this.menuEnableInt.Text = "Enable Interrupts";
            this.menuEnableInt.Click += new
                System.EventHandler(this.menuEnableInt_Click);
%/INTERRUPT%
            // menuEvents
            this.menuEvents.Index = 2;
            this.menuEvents.Text = "Events";
%NOEVENT%
            this.menuEvents.Visible = false;
            this.menuEvents.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuEventNotActive});
            this.menuEventNotActive.Index = 0;
            this.menuEventNotActive.Text = "Not Active";
%/NOEVENT%
%_EVENT%
            this.menuEvents.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuRegisterEvent});
            this.menuEvents.Select += new
                System.EventHandler(this.menuEvents_Select);
            // menuRegisterEvent
            this.menuRegisterEvent.Index = 0;
            this.menuRegisterEvent.Text = "Regsiter Events";
            this.menuRegisterEvent.Click += new
                System.EventHandler(this.menuRegisterEvent_Click);
%/_EVENT%

            // menuCfgSpace
            this.menuCfgSpace.Index = 3;
            this.menuCfgSpace.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuCfgOffset,
                this.menuCfgReg});
            this.menuCfgSpace.Text = "Configuration Space";
            // menuCfgOffset
            this.menuCfgOffset.Index = 0;
            this.menuCfgOffset.Text = "By Offset ";
            this.menuCfgOffset.Click += new
                System.EventHandler(this.menuCfgOffset_Click);
            // menuCfgReg
            this.menuCfgReg.Index = 1;
            this.menuCfgReg.Text = "By Register";
            this.menuCfgReg.Click += new
                System.EventHandler(this.menuCfgReg_Click);
            // menuRTRegs
            this.menuRTRegs.Index = 4;
            this.menuRTRegs.MenuItems.AddRange(new
                System.Windows.Forms.MenuItem[] {
                this.menuRTRegsRW});
            this.menuRTRegs.Text = "RunTime Registers";
            // menuRTRegsRW
            this.menuRTRegsRW.Index = 0;
            this.menuRTRegsRW.Text = "Read/Write RT Registers";
            this.menuRTRegsRW.Click += new
                System.EventHandler(this.menuRTRegsRW_Click);
            // lblLog
            this.lblLog.Location = new System.Drawing.Point(24, 152);
            this.lblLog.Name = "lblLog";
            this.lblLog.TabIndex = 28;
            this.lblLog.Text = "Log";
            // lbl%NAME%Dev
            this.lbl%NAME%Dev.Location = new System.Drawing.Point(24, 56);
            this.lbl%NAME%Dev.Name = "lbl%NAME%Dev";
            this.lbl%NAME%Dev.Size = new System.Drawing.Size(120, 23);
            this.lbl%NAME%Dev.TabIndex = 29;
            this.lbl%NAME%Dev.Text = "%NAME% Devices Found:";
            // label1
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif",
                9.75F, System.Drawing.FontStyle.Bold,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label1.Location = new System.Drawing.Point(40, 16);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(232, 23);
            this.label1.TabIndex = 30;
            this.label1.Text = "Select a device to activate its menu";
            // btLog
            this.btLog.Location = new System.Drawing.Point(672, 208);
            this.btLog.Name = "btLog";
            this.btLog.Size = new System.Drawing.Size(80, 40);
            this.btLog.TabIndex = 31;
            this.btLog.Text = "Clear Log";
            this.btLog.Click += new System.EventHandler(this.btLog_Click);
            // btExit
            this.btExit.Location = new System.Drawing.Point(672, 304);
            this.btExit.Name = "btExit";
            this.btExit.Size = new System.Drawing.Size(80, 40);
            this.btExit.TabIndex = 32;
            this.btExit.Text = "Exit";
            this.btExit.Click += new System.EventHandler(this.btExit_Click);
            // btDevice
            this.btDevice.Location = new System.Drawing.Point(644, 95);
            this.btDevice.Name = "btDevice";
            this.btDevice.Size = new System.Drawing.Size(112, 23);
            this.btDevice.TabIndex = 33;
            this.btDevice.Text = "Open Device";
            this.btDevice.Click += new System.EventHandler(this.btDevice_Click);
            // %NAME%_diag
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(768, 409);
            this.Controls.Add(this.btDevice);
            this.Controls.Add(this.btExit);
            this.Controls.Add(this.btLog);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.lbl%NAME%Dev);
            this.Controls.Add(this.lblLog);
            this.Controls.Add(this.lstBxDevices);
            this.Controls.Add(this.txtLog);
            this.Menu = this.mainMenu1;
            this.Name = "%NAME%_diag";
            this.StartPosition =
                System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "%NAME% .NET Sample";
            this.Load += new System.EventHandler(this.%NAME%_diag_Load);
            this.Closed += new System.EventHandler(this.%NAME%_diag_Closing);
            this.ResumeLayout(false);
        }
#endregion

        /// The main entry point for the application.
        [STAThread]
            static void Main()
            {
                Application.Run(new %NAME%_diag());
            }


        /* Open a handle to a device */
        private bool DeviceOpen(int iSelectedIndex)
        {
            DWORD dwStatus;
            %NAME%_Device device = pciDevList.Get(iSelectedIndex);

            /* Open a handle to the device */
            dwStatus = device.Open();
            if (dwStatus != (DWORD)wdc_err.WD_STATUS_SUCCESS)
            {
                Log.ErrLog("%NAME%_diag.DeviceOpen: Failed opening a " +
                    "handle to the device (" + device.ToString(false) + ")");
                return false;
            }
            Log.TraceLog("%NAME%_diag.DeviceOpen: " +
                "The device was successfully opened." +
                "You can now activate the device through the enabled menu " +
                "above");
            return true;
        }

        /* Close handle to a %NAME% device */
        private BOOL DeviceClose(int iSelectedIndex)
        {
            %NAME%_Device device = pciDevList.Get(iSelectedIndex);
            BOOL bStatus = false;

            if (device.Handle != IntPtr.Zero && !(bStatus = device.Close()))
            {
                Log.ErrLog("%NAME%_diag.DeviceClose: Failed closing %NAME% "
                    + "device (" + device.ToString(false) + ")");
            }
            else
            {
                device.Handle = IntPtr.Zero;
            }
            return bStatus;
        }

        private void %NAME%_diag_Load(object sender, System.EventArgs e)
        {
            DWORD dwStatus = pciDevList.Init();
            if (dwStatus != (DWORD)wdc_err.WD_STATUS_SUCCESS)
                goto Error;

            foreach(%NAME%_Device dev in pciDevList)
                lstBxDevices.Items.Add(dev.ToString(true));
            lstBxDevices.SelectedIndex = 0;

            return;
Error:
            DisableMenu();
            btDevice.Enabled = false;
        }

%INTERRUPT%
        private void %NAME%_IntHandler(%NAME%_Device dev)
        {
            Log.TraceLog("interrupt for device {" + dev.ToString(false) +
                "} received!");

            Log.TraceLog("Interrupt Type: " +
                dev.WDC_DIAG_IntTypeDescriptionGet());

            if (dev.IsMsiInt())
                Log.TraceLog("Message Data: " + dev.GetEnableIntLastMsg());
        }
%/INTERRUPT%

%_EVENT%
        private void %NAME%_EventHandler(ref WD_EVENT wdEvent,
            %NAME%_Device dev)
        {
            string sAction;
            switch((WD_EVENT_ACTION)wdEvent.dwAction)
            {
                case WD_EVENT_ACTION.WD_INSERT:
                    sAction = "WD_INSERT";
                    break;
                case WD_EVENT_ACTION.WD_REMOVE:
                    sAction = "WD_REMOVE";
                    break;
                case WD_EVENT_ACTION.WD_POWER_CHANGED_D0:
                    sAction = "WD_POWER_CHANGED_D0";
                    break;
                case WD_EVENT_ACTION.WD_POWER_CHANGED_D1:
                    sAction = "WD_POWER_CHANGED_D1";
                    break;
                case WD_EVENT_ACTION.WD_POWER_CHANGED_D2:
                    sAction = "WD_POWER_CHANGED_D2";
                    break;
                case WD_EVENT_ACTION.WD_POWER_CHANGED_D3:
                    sAction = "WD_POWER_CHANGED_D3";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_WORKING:
                    sAction = "WD_POWER_SYSTEM_WORKING";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_SLEEPING1:
                    sAction = "WD_POWER_SYSTEM_SLEEPING1";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_SLEEPING2:
                    sAction = "WD_POWER_SYSTEM_SLEEPING2";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_SLEEPING3:
                    sAction = "WD_POWER_SYSTEM_SLEEPING3";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_HIBERNATE:
                    sAction = "WD_POWER_SYSTEM_HIBERNATE";
                    break;
                case WD_EVENT_ACTION.WD_POWER_SYSTEM_SHUTDOWN:
                    sAction = "WD_POWER_SYSTEM_SHUTDOWN";
                    break;
                default:
                    sAction = wdEvent.dwAction.ToString("X");
                    break;
            }
            Log.TraceLog("Received event notification of type " + sAction +
                " on " + dev.ToString(false));
        }
%/_EVENT%

        private void %NAME%_diag_Closing(object sender, System.EventArgs e)
        {
            pciDevList.Dispose();
        }

        /* list box lstBxDevices */
        private void lstBxDevices_SelectedIndexChanged(object sender,
            System.EventArgs e)
        {
            if (lstBxDevices.SelectedIndex < 0)
            {
                DisableMenu();
                btDevice.Enabled = false;
            }
            else
            {
                %NAME%_Device dev =
                    pciDevList.Get(lstBxDevices.SelectedIndex);
                UpdateMenu(lstBxDevices.SelectedIndex);
                btDevice.Enabled = true;
                if (dev.Handle == IntPtr.Zero)
                    btDevice.Text = "Open Device";
                else
                    btDevice.Text = "Close Device";

                menuRTRegs.Visible = (dev.Regs.g%NAME%_RT_Regs.Length > 0) ?
                    true : false;
            }
        }

        private void lstBxDevices_DoubleClicked(object sender,
            System.EventArgs e)
        {
            btDevice_Click(sender, e);
        }

        /* device button */
        private void btDevice_Click(object sender, System.EventArgs e)
        {
            if (btDevice.Text == "Open Device")
            {
                if (DeviceOpen(lstBxDevices.SelectedIndex) == true)
                {
                    btDevice.Text = "Close Device";
                    EnableMenu();
                }
            }
            else
            {
                %NAME%_Device dev =
                    pciDevList.Get(lstBxDevices.SelectedIndex);
                DeviceClose(lstBxDevices.SelectedIndex);
                btDevice.Text = "Open Device";
                DisableMenu();
            }
        }

        /* Menu*/
        private void UpdateMenu(int index)
        {
            %NAME%_Device dev =
                pciDevList.Get(lstBxDevices.SelectedIndex);
            if (dev.Handle == IntPtr.Zero)
                DisableMenu();
            else
                EnableMenu();
        }

        private void EnableMenu()
        {
            ToggleMenu(true);
        }

        private void DisableMenu()
        {
            ToggleMenu(false);
        }

        private void ToggleMenu(bool flag)
        {
            for (int index = 0; index < mainMenu1.MenuItems.Count; ++index)
                mainMenu1.MenuItems[index].Enabled = flag;
        }


        /* Address Space Item */
        private void menuAddrRW_Click(object sender, System.EventArgs e)
        {
            %NAME%_Device dev =
                pciDevList.Get(lstBxDevices.SelectedIndex);
            string[] sBars = dev.AddrDescToString(false);
            AddrSpaceTransferForm addrSpcFrm = new
                AddrSpaceTransferForm(dev, sBars);
            addrSpcFrm.GetInput();
        }

%INTERRUPT%
        /* Interrupts items*/

        private void menuInterrupts_Select(object sender,
            System.EventArgs e)
        {
            if (menuInterrupts.Enabled == false)
                return;
            %NAME%_Device dev = pciDevList.Get(lstBxDevices.SelectedIndex);
            bool bIsEnb = dev.IsEnabledInt();

            menuEnableInt.Text = bIsEnb ? "Disable Interrupts" :
                "Enable Interrupts";
        }

        private void menuEnableInt_Click(object sender,
            System.EventArgs e)
        {
            %NAME%_Device dev = pciDevList.Get(lstBxDevices.SelectedIndex);
            if (menuEnableInt.Text == "Enable Interrupts")
            {
                DWORD dwStatus = dev.EnableInterrupts(new
                    USER_INTERRUPT_CALLBACK(%NAME%_IntHandler), dev.Handle);
                if (dwStatus == (DWORD)wdc_err.WD_STATUS_SUCCESS)
                    menuEnableInt.Text = "Disable Interrupts";
            }
            else
            {
                DWORD dwStatus = dev.DisableInterrupts();
                if (dwStatus == (DWORD)wdc_err.WD_STATUS_SUCCESS)
                    menuEnableInt.Text = "Enable Interrupts";
            }
        }
%/INTERRUPT%

%_EVENT%
        /* Event Items*/
        private void menuEvents_Select(object sender, System.EventArgs e)
        {
            if (menuEvents.Enabled == false)
                return;
            %NAME%_Device dev = pciDevList.Get(lstBxDevices.SelectedIndex);
            menuRegisterEvent.Text = dev.IsEventRegistered() ?
                "Unregister Events" : "Register Events";
        }

        private void menuRegisterEvent_Click(object sender, System.EventArgs e)
        {
            if (menuRegisterEvent.Text == "Register Events")
            {
                pciDevList.Get(lstBxDevices.SelectedIndex).
                    EventRegister(new USER_EVENT_CALLBACK(%NAME%_EventHandler));
                menuRegisterEvent.Text = "Unregister Events";
            }
            else
            {
                pciDevList.Get(lstBxDevices.SelectedIndex).
                    EventUnregister();
                menuRegisterEvent.Text = "Register Events";
            }
        }
%/_EVENT%

        /* Configuration Space Items*/
        private void menuCfgOffset_Click(object sender, System.EventArgs e)
        {
            %NAME%_Device dev =
                pciDevList.Get(lstBxDevices.SelectedIndex);
            CfgTransfersForm cfgOffsetFrom = new CfgTransfersForm(dev);
            cfgOffsetFrom.GetInput();
        }

        private void menuCfgReg_Click(object sender, System.EventArgs e)
        {
            %NAME%_Device dev =
                pciDevList.Get(lstBxDevices.SelectedIndex);
            RegistersForm regForm = new RegistersForm(dev, ACTION_TYPE.CFG);
            regForm.GetInput();
        }

        /*RunTime Registers Items*/
        private void menuRTRegsRW_Click(object sender, System.EventArgs e)
        {
            %NAME%_Device dev =
                pciDevList.Get(lstBxDevices.SelectedIndex);
            RegistersForm regForm = new RegistersForm(dev, ACTION_TYPE.RT);
            regForm.GetInput();
        }

        private void btExit_Click(object sender, System.EventArgs e)
        {
            Close();
            Dispose();
        }

        private void btLog_Click(object sender, System.EventArgs e)
        {
            txtLog.Clear();
        }

        public void LogFunc(string str)
        {
            if (txtLog != null)
                txtLog.Text += str + Environment.NewLine;
        }

        public void TraceLog(string str)
        {
            if (this.InvokeRequired)
                Invoke(new Log.TRACE_LOG(LogFunc), new object[]{str});
            else
                LogFunc(str);
        }

        public void ErrLog(string str)
        {
            if (this.InvokeRequired)
                Invoke(new Log.ERR_LOG(LogFunc), new object[]{str});
            else
                LogFunc(str);
        }
    }

    public class diag_lib
    {
        public static string PadBuffer(string str, uint fromIndex, uint toIndex)
        {
            for (uint i=fromIndex; i < toIndex; ++i)
                str += "0";

            return str;
        }

        public static string DisplayHexBuffer(object[] obj, DWORD dwBuffSize,
             WDC_ADDR_MODE mode)
        {
            string display = "";

            switch(mode)
            {
            case WDC_ADDR_MODE.WDC_MODE_8:
                {
                    BYTE[] buff = (BYTE[])obj[0];
                    for (uint i = 0; i < dwBuffSize; ++i)
                        display = string.Concat(display,
                            buff[i].ToString("X2"), " ");
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_16:
                {
                    WORD[] buff = (WORD[])obj[0];
                    for (int i = 0; i < dwBuffSize / 2; ++i)
                        display = string.Concat(display,
                            buff[i].ToString("X4"), " ");
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_32:
                {
                    UINT32[] buff = (UINT32[])obj[0];
                    for (int i = 0; i < dwBuffSize / 4; ++i)
                        display = string.Concat(display,
                            buff[i].ToString("X8"), " ");
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_64:
                {
                    UINT64[] buff = (UINT64[])obj[0];
                    for (int i = 0; i < dwBuffSize / 8; ++i)
                        display = string.Concat(display,
                            buff[i].ToString("X16"), " ");
                    break;
                }
            }
            return display;
        }

        public static string DisplayHexBuffer(byte[] buff, uint dwBuffSize)
        {
            return DisplayHexBuffer(new object[]{buff}, dwBuffSize,
                WDC_ADDR_MODE.WDC_MODE_8);
        }
    };
}

===BEGIN MODULE diag/AddrSpaceTransferForm.cs
using System;
using System.Runtime.InteropServices;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;
using wdc_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using BOOL = System.Boolean;
using BYTE = System.Byte;
using WORD = System.UInt16;
using DWORD = System.UInt32;
using UINT32 = System.UInt32;
using UINT64 = System.UInt64;

namespace Jungo.%LNAME%_diag
{
    public class AddrSpaceTransferForm : System.Windows.Forms.Form
    {
        private Exception m_excp;
        private %NAME%_Device m_device;
        private object[] m_obj;
        private RW m_direction;
        private DWORD m_dwBar;
        private WDC_ADDR_MODE m_mode;
        private DWORD m_dwBytes;
        private TRANSFER_TYPE m_type;
        private DWORD m_dwOffset;
        private bool m_bAutoInc;
        private byte[] m_bData;
        private WORD[] m_wData;
        private UINT32[] m_u32Data;
        private UINT64[] m_u64Data;
        private System.Windows.Forms.ComboBox cmboBar;
        private System.Windows.Forms.ComboBox cmboMode;
        private System.Windows.Forms.TextBox txtOffset;
        private System.Windows.Forms.ComboBox cmboTransType;
        private System.Windows.Forms.TextBox txtNumBytes;
        private System.Windows.Forms.Label lblNumBytes;
        private System.Windows.Forms.Label lblOffset;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.Label lblBar;
        private System.Windows.Forms.Label lblTransType;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox txtData;
        private System.Windows.Forms.Button btExit;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.CheckBox chkBoxInc;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox txtInput;
        private System.Windows.Forms.Button btWrite;
        private System.Windows.Forms.Button btLog;
        private System.Windows.Forms.Button btRead;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label5;

        private System.ComponentModel.Container components = null;

        public AddrSpaceTransferForm(%NAME%_Device dev, string[] sBars)
        {
            InitializeComponent();

            m_device = dev;

            for (int i = 0; i < sBars.Length; ++i)
                cmboBar.Items.Add(sBars[i]);

            this.Text = "Read/Write Address Space Form";

            cmboMode.Items.AddRange(new object[]{"8 bits", "16 bits", "32 bits",
                "64 bits"});
            cmboTransType.Items.AddRange(new object[]{"block", "non-block"});
            chkBoxInc.Enabled = false;
            txtNumBytes.Enabled = false;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                    components.Dispose();
            }
            base.Dispose(disposing);
        }

#region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.cmboBar = new System.Windows.Forms.ComboBox();
            this.cmboMode = new System.Windows.Forms.ComboBox();
            this.txtOffset = new System.Windows.Forms.TextBox();
            this.cmboTransType = new System.Windows.Forms.ComboBox();
            this.txtNumBytes = new System.Windows.Forms.TextBox();
            this.lblNumBytes = new System.Windows.Forms.Label();
            this.lblOffset = new System.Windows.Forms.Label();
            this.txtData = new System.Windows.Forms.TextBox();
            this.btRead = new System.Windows.Forms.Button();
            this.btExit = new System.Windows.Forms.Button();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.btLog = new System.Windows.Forms.Button();
            this.btWrite = new System.Windows.Forms.Button();
            this.lblBar = new System.Windows.Forms.Label();
            this.lblTransType = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.chkBoxInc = new System.Windows.Forms.CheckBox();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.txtInput = new System.Windows.Forms.TextBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.groupBox1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.SuspendLayout();
            // cmboBar
            this.cmboBar.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.cmboBar.Location = new System.Drawing.Point(8, 32);
            this.cmboBar.Name = "cmboBar";
            this.cmboBar.Size = new System.Drawing.Size(280, 21);
            this.cmboBar.TabIndex = 0;
            this.cmboBar.Text = "---- ----";
            // cmboMode
            this.cmboMode.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.cmboMode.Location = new System.Drawing.Point(8, 96);
            this.cmboMode.Name = "cmboMode";
            this.cmboMode.Size = new System.Drawing.Size(121, 21);
            this.cmboMode.TabIndex = 1;
            this.cmboMode.Text = "---- ----";
            // txtOffset
            this.txtOffset.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.txtOffset.Location = new System.Drawing.Point(24, 160);
            this.txtOffset.Name = "txtOffset";
            this.txtOffset.TabIndex = 5;
            this.txtOffset.Text = "";
            // cmboTransType
            this.cmboTransType.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.cmboTransType.ItemHeight = 13;
            this.cmboTransType.Location = new System.Drawing.Point(168, 96);
            this.cmboTransType.Name = "cmboTransType";
            this.cmboTransType.Size = new System.Drawing.Size(104, 21);
            this.cmboTransType.TabIndex = 2;
            this.cmboTransType.Text = "---- ----";
            this.cmboTransType.SelectedIndexChanged += new System.EventHandler(
                this.cmboTransType_SelectedIndexChanged);
            // txtNumBytes
            this.txtNumBytes.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.txtNumBytes.Location = new System.Drawing.Point(336, 48);
            this.txtNumBytes.Name = "txtNumBytes";
            this.txtNumBytes.TabIndex = 3;
            this.txtNumBytes.Text = "";
            // lblNumBytes
            this.lblNumBytes.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.lblNumBytes.Location = new System.Drawing.Point(328, 24);
            this.lblNumBytes.Name = "lblNumBytes";
            this.lblNumBytes.Size = new System.Drawing.Size(120, 23);
            this.lblNumBytes.TabIndex = 5;
            this.lblNumBytes.Text = "Number of Bytes (hex):";
            // lblOffset
            this.lblOffset.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.lblOffset.Location = new System.Drawing.Point(8, 136);
            this.lblOffset.Name = "lblOffset";
            this.lblOffset.TabIndex = 6;
            this.lblOffset.Text = "Offset (hex):";
            // txtData
            this.txtData.AutoSize = false;
            this.txtData.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.txtData.Location = new System.Drawing.Point(32, 192);
            this.txtData.Multiline = true;
            this.txtData.Name = "txtData";
            this.txtData.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtData.Size = new System.Drawing.Size(480, 136);
            this.txtData.TabIndex = 15;
            this.txtData.Text = "";
            // btRead
            this.btRead.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.btRead.Location = new System.Drawing.Point(488, 24);
            this.btRead.Name = "btRead";
            this.btRead.TabIndex = 7;
            this.btRead.Text = "Read";
            this.btRead.Click += new System.EventHandler(this.btRead_Click);
            // btExit
            this.btExit.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btExit.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.btExit.Location = new System.Drawing.Point(24, 136);
            this.btExit.Name = "btExit";
            this.btExit.TabIndex = 11;
            this.btExit.Text = "Exit";
            // groupBox1
            this.groupBox1.Controls.Add(this.btLog);
            this.groupBox1.Controls.Add(this.btWrite);
            this.groupBox1.Controls.Add(this.btExit);
            this.groupBox1.Location = new System.Drawing.Point(464, 8);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(120, 168);
            this.groupBox1.TabIndex = 10;
            this.groupBox1.TabStop = false;
            // btLog
            this.btLog.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.btLog.Location = new System.Drawing.Point(23, 96);
            this.btLog.Name = "btLog";
            this.btLog.TabIndex = 9;
            this.btLog.Text = "Clear Log";
            this.btLog.Click += new System.EventHandler(this.btLog_Click);
            // btWrite
            this.btWrite.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.btWrite.Location = new System.Drawing.Point(24, 56);
            this.btWrite.Name = "btWrite";
            this.btWrite.TabIndex = 8;
            this.btWrite.Text = "Write";
            this.btWrite.Click += new System.EventHandler(this.btWrite_Click);
            // lblBar
            this.lblBar.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.lblBar.Location = new System.Drawing.Point(8, 8);
            this.lblBar.Name = "lblBar";
            this.lblBar.Size = new System.Drawing.Size(120, 23);
            this.lblBar.TabIndex = 11;
            this.lblBar.Text = "Address Bar";
            // lblTransType
            this.lblTransType.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.lblTransType.Location = new System.Drawing.Point(168, 72);
            this.lblTransType.Name = "lblTransType";
            this.lblTransType.Size = new System.Drawing.Size(120, 23);
            this.lblTransType.TabIndex = 12;
            this.lblTransType.Text = "Transfer Type";
            // label3
            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label3.Location = new System.Drawing.Point(8, 72);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(120, 23);
            this.label3.TabIndex = 13;
            this.label3.Text = "Transfer Mode";
            // chkBoxInc
            this.chkBoxInc.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.chkBoxInc.Location = new System.Drawing.Point(328, 80);
            this.chkBoxInc.Name = "chkBoxInc";
            this.chkBoxInc.TabIndex = 4;
            this.chkBoxInc.Text = "AutoIncrement Address";
            // groupBox2
            this.groupBox2.Controls.Add(this.label1);
            this.groupBox2.Font = new System.Drawing.Font(
                "Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Italic,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.groupBox2.Location = new System.Drawing.Point(304, 8);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(152, 104);
            this.groupBox2.TabIndex = 15;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Block Transfer Options";
            // label1
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label1.Location = new System.Drawing.Point(16, 40);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(16, 23);
            this.label1.TabIndex = 16;
            this.label1.Text = "0x";
            // label2
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label2.Location = new System.Drawing.Point(8, 160);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(16, 23);
            this.label2.TabIndex = 16;
            this.label2.Text = "0x";
            // txtInput
            this.txtInput.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.txtInput.Location = new System.Drawing.Point(160, 160);
            this.txtInput.Name = "txtInput";
            this.txtInput.Size = new System.Drawing.Size(288, 20);
            this.txtInput.TabIndex = 6;
            this.txtInput.Text = "";
            // label4
            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label4.Location = new System.Drawing.Point(144, 160);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(16, 23);
            this.label4.TabIndex = 18;
            this.label4.Text = "0x";
            // label5
            this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Regular,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.label5.Location = new System.Drawing.Point(160, 128);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(280, 32);
            this.label5.TabIndex = 19;
            this.label5.Text = "Input for Write Transactions (hex):  For Block "
                + "transfer, please enter in little endian mode";
            // AddrSpaceTransferForm
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(600, 341);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.txtInput);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.chkBoxInc);
            this.Controls.Add(this.cmboMode);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.lblTransType);
            this.Controls.Add(this.lblBar);
            this.Controls.Add(this.btRead);
            this.Controls.Add(this.txtData);
            this.Controls.Add(this.lblOffset);
            this.Controls.Add(this.lblNumBytes);
            this.Controls.Add(this.txtNumBytes);
            this.Controls.Add(this.txtOffset);
            this.Controls.Add(this.cmboTransType);
            this.Controls.Add(this.cmboBar);
            this.Controls.Add(this.groupBox1);
            this.Controls.Add(this.groupBox2);
            this.Font = new System.Drawing.Font("Microsoft Sans Serif",
                8.25F, System.Drawing.FontStyle.Italic,
                System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            this.Name = "AddrSpaceTransferForm";
            this.StartPosition =
                System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Read/Write Address Space Form";
            this.groupBox1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.ResumeLayout(false);
        }
#endregion

        public bool GetInput()
        {
            m_obj = new object[1];

            DialogResult result = DialogResult.Retry;

            while ((result = ShowDialog()) == DialogResult.Retry);

            return true;
        }

        private void btRead_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.READ;
            btClick();
        }

        private void btWrite_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.WRITE;
            btClick();
        }

        private void btClick()
        {
            DialogResult = DialogResult.None;
            try
            {
                TranslateInput();
            }
            catch
            {
                MessageBox.Show(m_excp.Message, "Input Entry Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                DialogResult = DialogResult.Retry;
                return;
            }

            ReadWriteAddrSpace();
        }

        private void ReadWriteAddrSpace()
        {
            DWORD dwStatus = 0;
            BOOL bIsBlock = (m_type == TRANSFER_TYPE.BLOCK);
            BOOL bIsRead = (m_direction == RW.READ);
            WDC_ADDR_RW_OPTIONS dwOptions = (m_bAutoInc ?
                WDC_ADDR_RW_OPTIONS.WDC_ADDR_RW_DEFAULT :
                WDC_ADDR_RW_OPTIONS.WDC_ADDR_RW_NO_AUTOINC);
            DWORD dwFloorBytes = ((DWORD)(m_dwBytes / (DWORD)m_mode)) *
                (DWORD)m_mode;

            switch(m_mode)
            {
            case WDC_ADDR_MODE.WDC_MODE_8:
                {
                    if (bIsRead)
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_ReadAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_bData,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_ReadAddr8(m_device.Handle,
                                m_dwBar, m_dwOffset, ref m_bData[0]);
                    else
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_WriteAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_bData,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_WriteAddr8(m_device.Handle,
                                m_dwBar, m_dwOffset, m_bData[0]);

                    m_obj[0] = m_bData;
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_16:
                {
                    if (bIsRead)
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_ReadAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_wData,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_ReadAddr16(m_device.Handle,
                                m_dwBar, m_dwOffset, ref m_wData[0]);
                    else
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_WriteAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_wData,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_WriteAddr16(m_device.Handle,
                                m_dwBar, m_dwOffset, m_wData[0]);

                    m_obj[0] = m_wData;
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_32:
                {
                    if (bIsRead)
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_ReadAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_u32Data,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_ReadAddr32(m_device.Handle,
                                m_dwBar, m_dwOffset, ref m_u32Data[0]);
                    else
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_WriteAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_u32Data,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_WriteAddr32(m_device.Handle,
                                m_dwBar, m_dwOffset, m_u32Data[0]);

                    m_obj[0] = m_u32Data;
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_64:
                {
                    if (bIsRead)
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_ReadAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_u64Data,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_ReadAddr64(m_device.Handle,
                                m_dwBar, m_dwOffset, ref m_u64Data[0]);
                    else
                        dwStatus = bIsBlock ?
                            wdc_lib_decl.WDC_WriteAddrBlock(m_device.Handle,
                                m_dwBar, m_dwOffset, dwFloorBytes, m_u64Data,
                                m_mode, dwOptions) :
                            wdc_lib_decl.WDC_WriteAddr64(m_device.Handle,
                                m_dwBar, m_dwOffset, m_u64Data[0]);

                    m_obj[0] = m_u64Data;
                    break;
                }
            }

            TraceLog(bIsRead, (wdc_err)dwStatus);
        }

        private void TranslateInput()
        {
            string str = "";

            m_excp = new Exception("Choose a BAR");
            if ((uint)cmboBar.SelectedIndex == 0xffffffff)
                throw m_excp;
            m_dwBar = (DWORD)cmboBar.SelectedIndex;

            m_excp = new Exception("Choose the Transfer Mode");
            uint uiModeIndex = (uint)cmboMode.SelectedIndex;
            if (uiModeIndex == 0xffffffff)
                throw m_excp;
            m_mode = (uiModeIndex == 0) ? WDC_ADDR_MODE.WDC_MODE_8:
                (uiModeIndex == 1) ? WDC_ADDR_MODE.WDC_MODE_16:
                (uiModeIndex == 2) ? WDC_ADDR_MODE.WDC_MODE_32:
                WDC_ADDR_MODE.WDC_MODE_64;

            m_excp = new Exception("Choose the Transfer Type");
            if ((uint)cmboTransType.SelectedIndex == 0xffffffff)
                throw m_excp;
            m_type = (cmboTransType.SelectedIndex == 0) ?
            TRANSFER_TYPE.BLOCK : TRANSFER_TYPE.NONBLOCK;

            if (txtNumBytes.Enabled == true)
            {
                m_excp = new Exception("Please enter the number of bytes. " +
                    "Entered value should be a hex number." +
                    Environment.NewLine + " (Maximum value: 0x" +
                    m_device.AddrDesc[m_dwBar].qwBytes.ToString("X") + ")");
                m_dwBytes = Convert.ToUInt32(txtNumBytes.Text, 16);
                if (m_dwBytes > m_device.AddrDesc[m_dwBar].qwBytes)
                    throw m_excp;
            }
            else
            {
                m_dwBytes = (DWORD)((m_mode == WDC_ADDR_MODE.WDC_MODE_8) ? 1 :
                    ((m_mode == WDC_ADDR_MODE.WDC_MODE_16) ? 2 :
                    ((m_mode == WDC_ADDR_MODE.WDC_MODE_32) ? 4 : 8)));
            }

            if (chkBoxInc.Enabled == true)
                m_bAutoInc = chkBoxInc.Checked;

            m_excp = new Exception("Please enter the offset. " +
                "Entered value should be a hex number");
            m_dwOffset = (DWORD)Convert.ToInt32(txtOffset.Text, 16);

            if (m_direction == RW.WRITE && txtInput.Text == "")
            {
                m_excp = new Exception("You must enter the data to write. " +
                    "data should be hex");
                throw m_excp;
            }

            m_excp = new Exception("The data you've entered is invalid. please "
                + "try again (hex)");

            switch(m_mode)
            {
            case WDC_ADDR_MODE.WDC_MODE_8:
                {
                    m_bData = new byte[m_dwBytes];

                    if (m_direction == RW.WRITE)
                    {
                        str = txtInput.Text;
                        for (int i = 0, j = 0; i < str.Length && j < m_dwBytes;
                            j++)
                        {
                            while (str[i] == ' ')
                                ++i;
                            m_bData[j] =
                                Convert.ToByte(str.Substring(i, 2), 16);
                            i += 2;
                        }
                    }
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_16:
                {
                    m_wData = new WORD[m_dwBytes/2];

                    if (m_direction == RW.WRITE)
                    {
                        str = txtInput.Text;
                        for (int i = 0, j = 0;
                            i < str.Length && j < m_dwBytes / 2; j++)
                        {
                            while (str[i] == ' ')
                                ++i;
                            m_wData[j] =
                                Convert.ToUInt16(str.Substring(i, 4), 16);
                            i += 4;
                        }
                    }
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_32:
                {
                    m_u32Data = new UINT32[m_dwBytes / 4];

                    if (m_direction == RW.WRITE)
                    {
                        str = txtInput.Text;
                        for (int i = 0, j = 0;
                            i < str.Length && j < m_dwBytes / 4; j++)
                        {
                            while (str[i] == ' ')
                                ++i;
                            m_u32Data[j] =
                                Convert.ToUInt32(str.Substring(i, 8), 16);
                            i += 8;
                        }
                    }
                    break;
                }
            case WDC_ADDR_MODE.WDC_MODE_64:
                {
                    m_u64Data = new UINT64[m_dwBytes/8];

                    if (m_direction == RW.WRITE)
                    {
                        str = txtInput.Text;
                        for (int i = 0, j = 0;
                            i < str.Length && j < m_dwBytes / 8; j++)
                        {
                            while (str[i] == ' ')
                                ++i;
                            m_u64Data[j] =
                                Convert.ToUInt64(str.Substring(i, 2), 16);
                            i += 16;
                        }
                    }
                    break;
                }
            }
        }

        private void cmboTransType_SelectedIndexChanged(object sender,
            System.EventArgs e)
        {
            if ((string)cmboTransType.SelectedItem == "non-block")
            {
                txtNumBytes.Enabled = false;
                chkBoxInc.Enabled = false;
            }
            else if ((string)cmboTransType.SelectedItem == "block")
            {
                txtNumBytes.Enabled = true;
                chkBoxInc.Enabled = true;
            }
        }

        private void btLog_Click(object sender, System.EventArgs e)
        {
            txtData.Clear();
        }

        private void TraceLog(BOOL bIsRead, wdc_err status)
        {
            string sData = "";
            string sInfo = "";

            if (status == wdc_err.WD_STATUS_SUCCESS)
            {
                sData = (bIsRead ? "R: " : "W: ") +
                    diag_lib.DisplayHexBuffer(m_obj, m_dwBytes, m_mode);
                sInfo = (bIsRead ? " from " : " to ") +    "offset " +
                    m_dwOffset.ToString("X") + " on BAR " + m_dwBar.ToString()
                    + "(" + m_device.ToString(false) + ")";

                Log.TraceLog("AddrSpaceTransferForm: " + sData + sInfo);
            }
            else
            {
                sData = "failed to " + (bIsRead ? "read from" : "write to") +
                    " offset " + m_dwOffset.ToString("X") + " on BAR " +
                    m_dwBar.ToString() + "status 0x" + status.ToString("X") +
                    ": " + utils.Stat2Str((DWORD)status);
                sInfo = "(" + m_device.ToString(false) + ")";

                Log.ErrLog("AddrSpaceTransferForm: " + sData + sInfo);
            }

            txtData.Text += sData + Environment.NewLine;
        }
    }
}

===BEGIN MODULE diag/CfgTransfersForm.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Runtime.InteropServices;

using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;
using wdc_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using DWORD = System.UInt32;
using BOOL = System.Boolean;
using BYTE = System.Byte;

namespace Jungo.%LNAME%_diag
{
    public class CfgTransfersForm : System.Windows.Forms.Form
    {
        private Exception m_excp;
        private %NAME%_Device m_device;
        private RW m_direction;
        private DWORD m_dwOffset;
        private DWORD m_dwBytes;
        private IntPtr m_pData;
        private byte[] m_buff;
        private System.Windows.Forms.TextBox txtOffset;
        private System.Windows.Forms.TextBox txtData;
        private System.Windows.Forms.Label lblOffset;
        private System.Windows.Forms.Label lblData;
        private System.Windows.Forms.TextBox txtBytes;
        private System.Windows.Forms.Label lblBytes;
        private System.Windows.Forms.Button btExit;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txtInput;
        private System.Windows.Forms.Button btWrite;
        private System.Windows.Forms.Button btLog;
        private System.Windows.Forms.Button btRead;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label4;

        private System.ComponentModel.Container components = null;

        public CfgTransfersForm(%NAME%_Device dev)
        {
            InitializeComponent();

            m_device = dev;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

#region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.txtOffset = new System.Windows.Forms.TextBox();
            this.txtData = new System.Windows.Forms.TextBox();
            this.lblOffset = new System.Windows.Forms.Label();
            this.lblData = new System.Windows.Forms.Label();
            this.btRead = new System.Windows.Forms.Button();
            this.btExit = new System.Windows.Forms.Button();
            this.txtBytes = new System.Windows.Forms.TextBox();
            this.lblBytes = new System.Windows.Forms.Label();
            this.txtInput = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.btWrite = new System.Windows.Forms.Button();
            this.btLog = new System.Windows.Forms.Button();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // txtOffset
            this.txtOffset.Location = new System.Drawing.Point(24, 32);
            this.txtOffset.Name = "txtOffset";
            this.txtOffset.Size = new System.Drawing.Size(96, 20);
            this.txtOffset.TabIndex = 0;
            this.txtOffset.Text = "";
            // txtData
            this.txtData.AutoSize = false;
            this.txtData.Location = new System.Drawing.Point(16, 136);
            this.txtData.Multiline = true;
            this.txtData.Name = "txtData";
            this.txtData.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtData.Size = new System.Drawing.Size(208, 88);
            this.txtData.TabIndex = 8;
            this.txtData.Text = "";
            // lblOffset
            this.lblOffset.Location = new System.Drawing.Point(16, 8);
            this.lblOffset.Name = "lblOffset";
            this.lblOffset.Size = new System.Drawing.Size(88, 16);
            this.lblOffset.TabIndex = 2;
            this.lblOffset.Text = "Offset (hex):";
            // lblData
            this.lblData.Location = new System.Drawing.Point(16, 112);
            this.lblData.Name = "lblData";
            this.lblData.TabIndex = 3;
            this.lblData.Text = "Data:";
            // btRead
            this.btRead.Location = new System.Drawing.Point(24, 240);
            this.btRead.Name = "btRead";
            this.btRead.TabIndex = 4;
            this.btRead.Text = "Read";
            this.btRead.Click += new System.EventHandler(this.btRead_Click);
            // btExit
            this.btExit.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btExit.Location = new System.Drawing.Point(232, 192);
            this.btExit.Name = "btExit";
            this.btExit.TabIndex = 7;
            this.btExit.Text = "Exit";
            // txtBytes
            this.txtBytes.Location = new System.Drawing.Point(152, 32);
            this.txtBytes.Name = "txtBytes";
            this.txtBytes.TabIndex = 2;
            this.txtBytes.Text = "";
            // lblBytes
            this.lblBytes.Location = new System.Drawing.Point(152, 8);
            this.lblBytes.Name = "lblBytes";
            this.lblBytes.Size = new System.Drawing.Size(120, 16);
            this.lblBytes.TabIndex = 6;
            this.lblBytes.Text = "Number of Bytes (hex):";
            // txtInput
            this.txtInput.Location = new System.Drawing.Point(168, 72);
            this.txtInput.Name = "txtInput";
            this.txtInput.Size = new System.Drawing.Size(128, 20);
            this.txtInput.TabIndex = 3;
            this.txtInput.Text = "";
            // label1
            this.label1.Location = new System.Drawing.Point(16, 72);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(136, 24);
            this.label1.TabIndex = 8;
            this.label1.Text = "Input for Write Transactions (hex):";
            // btWrite
            this.btWrite.Location = new System.Drawing.Point(128, 240);
            this.btWrite.Name = "btWrite";
            this.btWrite.TabIndex = 5;
            this.btWrite.Text = "Write";
            this.btWrite.Click += new System.EventHandler(this.btWrite_Click);
            // btLog
            this.btLog.Location = new System.Drawing.Point(232, 152);
            this.btLog.Name = "btLog";
            this.btLog.TabIndex = 6;
            this.btLog.Text = "Clear Log";
            this.btLog.Click += new System.EventHandler(this.btLog_Click);
            // label2
            this.label2.Location = new System.Drawing.Point(8, 32);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(16, 23);
            this.label2.TabIndex = 15;
            this.label2.Text = "0x";
            // label3
            this.label3.Location = new System.Drawing.Point(136, 32);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(16, 23);
            this.label3.TabIndex = 16;
            this.label3.Text = "0x";
            // label4
            this.label4.Location = new System.Drawing.Point(152, 72);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(16, 23);
            this.label4.TabIndex = 17;
            this.label4.Text = "0x";
            // CfgTransfersForm
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.CancelButton = this.btExit;
            this.ClientSize = new System.Drawing.Size(328, 277);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.btLog);
            this.Controls.Add(this.btWrite);
            this.Controls.Add(this.txtInput);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.txtBytes);
            this.Controls.Add(this.lblBytes);
            this.Controls.Add(this.btExit);
            this.Controls.Add(this.btRead);
            this.Controls.Add(this.lblData);
            this.Controls.Add(this.lblOffset);
            this.Controls.Add(this.txtData);
            this.Controls.Add(this.txtOffset);
            this.Name = "CfgTransfersForm";
            this.StartPosition =
                System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Read/Write Cfg Space By Offset";
            this.ResumeLayout(false);

        }
#endregion

        public bool GetInput()
        {
            DialogResult result = DialogResult.Retry;

            while ((result = ShowDialog()) == DialogResult.Retry);

            return true;
        }

        private void btClick(object sender, System.EventArgs e)
        {
            DialogResult = DialogResult.None;
            try
            {
                TranslateInput();
            }
            catch
            {
                MessageBox.Show(m_excp.Message, "Input Entry Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                DialogResult = DialogResult.Retry;
            }
        }

        private void btRead_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.READ;
            btClick(sender, e);
        }

        private void btWrite_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.WRITE;
            btClick(sender, e);
        }

        private void TranslateInput()
        {
            DWORD dwStatus;
            BOOL bIsRead = m_direction == RW.READ;
            m_excp = new Exception("Enter the offset. Entered value should " +
                "be a hex number");
            m_dwOffset = (DWORD)Convert.ToInt32(txtOffset.Text, 16);

            m_excp = new Exception("Enter the number of bytes. " +
                "Entered value should be a hex number");
            m_dwBytes = (DWORD)Convert.ToInt32(txtBytes.Text, 16);

            m_pData = Marshal.AllocHGlobal((int)m_dwBytes);
            if (m_pData == IntPtr.Zero)
                return;

            m_buff = new byte[m_dwBytes];

            if (!bIsRead)
            {
                if (txtInput.Text == "")
                {
                    m_excp = new Exception("You must enter the data to be " +
                        "written");
                    throw m_excp;
                }

                string str = diag_lib.PadBuffer(txtInput.Text,
                    (DWORD)txtInput.Text.Length,(DWORD)2*m_dwBytes);

                m_excp = new Exception("The data you've entered is invalid. " +
                    "please try again (hex)");
                for (int i = 0; i < m_dwBytes; ++i)
                    m_buff[i] = Convert.ToByte(str.Substring(2 * i, 2), 16);

                Marshal.Copy(m_buff, 0 , m_pData, (int)m_dwBytes);

                dwStatus = wdc_lib_decl.WDC_PciWriteCfg(m_device.Handle,
                    m_dwOffset, m_pData, m_dwBytes);
            }
            else // READ
            {
                dwStatus = wdc_lib_decl.WDC_PciReadCfg(m_device.Handle,
                    m_dwOffset, m_pData, m_dwBytes);

                if (dwStatus == (DWORD)wdc_err.WD_STATUS_SUCCESS)
                    Marshal.Copy(m_pData, m_buff, 0, (int)m_dwBytes);
            }

            TraceLog(bIsRead, (wdc_err)dwStatus);
        }

        private void btLog_Click(object sender, System.EventArgs e)
        {
            txtData.Clear();
        }

        private void TraceLog(BOOL bIsRead, wdc_err status)
        {
            string sData = "";
            string sInfo = "";

            if (status == wdc_err.WD_STATUS_SUCCESS)
            {
                sData = (bIsRead ? "R: " : "W: ") +
                    diag_lib.DisplayHexBuffer(m_buff, m_dwBytes);
                sInfo = (bIsRead ? " from " : " to ") + "offset " +
                    m_dwOffset.ToString("X") + "(" + m_device.ToString(false)
                    + ")";

                Log.TraceLog("CfgTransfersForm: " + sData + sInfo);
            }
            else
            {
                sData = "failed to " + (bIsRead ? "read from" : "write to") +
                    " offset " + m_dwOffset.ToString("X") + " status 0x" +
                    status.ToString("X") + ": " + utils.Stat2Str((DWORD)status);
                sInfo = "(" + m_device.ToString(false) + ")";

                Log.ErrLog("CfgTransfersForm: " + sData + sInfo);
            }

            txtData.Text += sData + Environment.NewLine;
        }
    }
}

===BEGIN MODULE diag/RegistersForm.cs
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Text;

using Jungo.wdapi_dotnet;
using Jungo.%LNAME%_lib;
using wdc_err = Jungo.wdapi_dotnet.WD_ERROR_CODES;
using UINT64 = System.UInt64;
using DWORD = System.UInt32;
using UINT32 = System.UInt32;
using WORD = System.UInt16;
using BYTE = System.Byte;
using BOOL = System.Boolean;

namespace Jungo.%LNAME%_diag
{
    public class RegistersForm : System.Windows.Forms.Form
    {
        private Exception m_excp;
        private %NAME%_Device m_device;
        private WDC_REG[] m_regs;
        private RW m_direction;
        private ACTION_TYPE m_regType;
        private BYTE m_bData;
        private WORD m_wData;
        private UINT32 m_u32Data;
        private UINT64 m_u64Data;
        private System.Windows.Forms.Label lblRegs;
        private System.Windows.Forms.Button btReadAll;
        private System.Windows.Forms.ComboBox cmboRegs;
        private System.Windows.Forms.TextBox txtData;
        private System.Windows.Forms.Button btExit;
        private System.Windows.Forms.Button btRead;
        private System.Windows.Forms.Button btWrite;
        private System.Windows.Forms.Button btLog;
        private System.Windows.Forms.TextBox txtInput;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label lblInput;

        private System.ComponentModel.Container components = null;

        public RegistersForm(%NAME%_Device dev, ACTION_TYPE regType)
        {
            InitializeComponent();

            m_device = dev;
            m_regType = regType;

            switch(regType)
            {
            case ACTION_TYPE.CFG:
                {
                    this.Text = "Read/Write Configuration Space by Registers";
                    lblRegs.Visible = true;
                    lblRegs.Text = "Choose a Cfg Register";
                    cmboRegs.Visible = true;
                    WDC_REG[] regs = dev.Regs.g%NAME%_CfgRegs;
                    for (int i = 0; i < regs.GetLength(0); ++i)
                    {
                        cmboRegs.Items.AddRange(new object[] {regs[i].sName +
                            " size: " + regs[i].dwSize.ToString("X") +
                            " - " + regs[i].sDesc});
                    }
                    break;
                }
            case ACTION_TYPE.RT:
                {
                    this.Text = "Read/Write RunTime Registers";
                    lblRegs.Visible = true;
                    lblRegs.Text = "Choose a RunTime Register";
                    cmboRegs.Visible = true;
                    WDC_REG[] regs = m_device.Regs.g%NAME%_RT_Regs;
                    for (int i = 0; i < regs.GetLength(0); ++i)
                    {
                        cmboRegs.Items.AddRange(new object[]{regs[i].sName +
                            " size: " + regs[i].dwSize.ToString("X") +
                            " - " + regs[i].sDesc});
                    }
                    break;
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

#region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.cmboRegs = new System.Windows.Forms.ComboBox();
            this.txtData = new System.Windows.Forms.TextBox();
            this.lblRegs = new System.Windows.Forms.Label();
            this.btReadAll = new System.Windows.Forms.Button();
            this.btExit = new System.Windows.Forms.Button();
            this.btRead = new System.Windows.Forms.Button();
            this.txtInput = new System.Windows.Forms.TextBox();
            this.btWrite = new System.Windows.Forms.Button();
            this.btLog = new System.Windows.Forms.Button();
            this.lblInput = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // cmboRegs
            this.cmboRegs.Location = new System.Drawing.Point(40, 32);
            this.cmboRegs.Name = "cmboRegs";
            this.cmboRegs.Size = new System.Drawing.Size(360, 21);
            this.cmboRegs.TabIndex = 0;
            this.cmboRegs.Text = "---- ----";
            // txtData
            this.txtData.AutoSize = false;
            this.txtData.Location = new System.Drawing.Point(40, 112);
            this.txtData.Multiline = true;
            this.txtData.Name = "txtData";
            this.txtData.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtData.Size = new System.Drawing.Size(360, 136);
            this.txtData.TabIndex = 8;
            this.txtData.Text = "";
            // lblRegs
            this.lblRegs.Location = new System.Drawing.Point(48, 8);
            this.lblRegs.Name = "lblRegs";
            this.lblRegs.Size = new System.Drawing.Size(256, 23);
            this.lblRegs.TabIndex = 9;
            this.lblRegs.Text = "Choose a RunTime Register";
            // btReadAll
            this.btReadAll.Location = new System.Drawing.Point(176, 264);
            this.btReadAll.Name = "btReadAll";
            this.btReadAll.TabIndex = 3;
            this.btReadAll.Text = "Read All ";
            this.btReadAll.Click +=
                new System.EventHandler(this.btReadAll_Click);
            // btExit
            this.btExit.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btExit.Location = new System.Drawing.Point(432, 192);
            this.btExit.Name = "btExit";
            this.btExit.TabIndex = 6;
            this.btExit.Text = "Exit";
            // btRead
            this.btRead.Location = new System.Drawing.Point(48, 264);
            this.btRead.Name = "btRead";
            this.btRead.TabIndex = 2;
            this.btRead.Text = "Read";
            this.btRead.Click += new System.EventHandler(this.btRead_Click);
            // txtInput
            this.txtInput.Location = new System.Drawing.Point(256, 72);
            this.txtInput.Name = "txtInput";
            this.txtInput.Size = new System.Drawing.Size(144, 20);
            this.txtInput.TabIndex = 1;
            this.txtInput.Text = "";
            // btWrite
            this.btWrite.Location = new System.Drawing.Point(304, 264);
            this.btWrite.Name = "btWrite";
            this.btWrite.TabIndex = 4;
            this.btWrite.Text = "Write";
            this.btWrite.Click += new System.EventHandler(this.btWrite_Click);
            // btLog
            this.btLog.Location = new System.Drawing.Point(432, 136);
            this.btLog.Name = "btLog";
            this.btLog.TabIndex = 5;
            this.btLog.Text = "Clear Log";
            this.btLog.Click += new System.EventHandler(this.btLog_Click);
            // lblInput
            this.lblInput.Location = new System.Drawing.Point(40, 72);
            this.lblInput.Name = "lblInput";
            this.lblInput.Size = new System.Drawing.Size(208, 23);
            this.lblInput.TabIndex = 17;
            this.lblInput.Text = "Enter Input in hex (Write Transactions):";
            // label2
            this.label2.Location = new System.Drawing.Point(240, 72);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(16, 23);
            this.label2.TabIndex = 18;
            this.label2.Text = "0x";
            // RegistersForm
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.CancelButton = this.btExit;
            this.ClientSize = new System.Drawing.Size(520, 301);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.lblInput);
            this.Controls.Add(this.btLog);
            this.Controls.Add(this.btWrite);
            this.Controls.Add(this.txtInput);
            this.Controls.Add(this.btRead);
            this.Controls.Add(this.btExit);
            this.Controls.Add(this.btReadAll);
            this.Controls.Add(this.lblRegs);
            this.Controls.Add(this.txtData);
            this.Controls.Add(this.cmboRegs);
            this.Name = "RegistersForm";
            this.StartPosition =
                System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Registers";
            this.ResumeLayout(false);

        }
#endregion

        public bool GetInput()
        {
            DialogResult result = DialogResult.Retry;

            while ((result = ShowDialog()) == DialogResult.Retry);

            return true;
        }

        private void btClick(object sender, System.EventArgs e)
        {
            DialogResult = DialogResult.None;

            try
            {
                TranslateInput_Regs();
            }
            catch
            {
                MessageBox.Show(m_excp.Message, "Input Entry Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                DialogResult = DialogResult.Retry;
                return;
            }

            if (m_direction == RW.READ_ALL)
                ReadAllRegs();
            else
                ReadWriteReg();
        }

        private void btRead_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.READ;
            btClick(sender, e);
        }

        private void btWrite_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.WRITE;
            btClick(sender, e);
        }

        private void btReadAll_Click(object sender, System.EventArgs e)
        {
            m_direction = RW.READ_ALL;
            btClick(sender, e);
        }

        private void TranslateInput_Regs()
        {
            if (m_direction != RW.READ_ALL)
            {
                m_regs = new WDC_REG[1];
                m_excp = new Exception("Select a Register");
                int iSelectedReg = cmboRegs.SelectedIndex;
                if ((uint)iSelectedReg == 0xffffffff)
                    throw m_excp;

                m_regs[0] = (m_regType == ACTION_TYPE.CFG) ?
                    m_device.Regs.g%NAME%_CfgRegs[iSelectedReg] :
                    m_device.Regs.g%NAME%_RT_Regs[iSelectedReg];

                if (m_direction == RW.WRITE)
                {
                    m_excp = new Exception("Enter the data to write. "
                        + "Entered value should be a hex number");
                    if (txtInput.Text == "")
                        throw m_excp;
                    DWORD dwSize = m_regs[0].dwSize;
                    switch(dwSize)
                    {
                    case wdc_lib_consts.WDC_SIZE_8:
                        {
                            m_bData = Convert.ToByte(txtInput.Text, 16);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_16:
                        {
                            m_wData = Convert.ToUInt16(txtInput.Text, 16);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_32:
                        {
                            m_u32Data = Convert.ToUInt32(txtInput.Text, 16);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_64:
                        {
                            m_u64Data = Convert.ToUInt64(txtInput.Text, 16);
                            break;
                        }
                    }
                }
            }
            else
            {
                m_regs = (m_regType == ACTION_TYPE.CFG) ?
                    m_device.Regs.g%NAME%_CfgRegs :
                    m_device.Regs.g%NAME%_RT_Regs;
            }
        }

        private BOOL IsLegalDirection(int iRegIndex)
        {
            WDC_REG reg = m_regs[iRegIndex];

            if (((RW.READ == m_direction || RW.READ_ALL == m_direction) &&
                (WDC_DIRECTION.WDC_WRITE == reg.direction)) ||
                ((RW.WRITE == m_direction) &&
                (WDC_DIRECTION.WDC_READ == reg.direction)))
                return false;

            return true;
        }

        private void ReadWriteReg()
        {
            WDC_REG reg = m_regs[0];
            DWORD dwStatus = (DWORD)wdc_err.WD_STATUS_SUCCESS;
            BOOL bIsRead = (m_direction == RW.READ);
            StringBuilder sDetails = new StringBuilder(1024);
            DWORD dwOutLen = 0;

            if (!IsLegalDirection(0))
            {
                txtData.Text += "you have chosen to " + (bIsRead ?
                    "read from" : "write to") + " a register which is " +
                    (bIsRead ? "write-only" : "read-only") +
                    Environment.NewLine;
                return;
            }

            switch (reg.dwSize)
            {
            case wdc_lib_consts.WDC_SIZE_8:
                {
                    if (RW.READ == m_direction)
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciReadCfg8(m_device.Handle,
                                reg.dwOffset, ref m_bData) :
                            wdc_lib_decl.WDC_ReadAddr8(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, ref m_bData);
                    }
                    else
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciWriteCfg8(m_device.Handle,
                                reg.dwOffset, m_bData) :
                            wdc_lib_decl.WDC_WriteAddr8(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, m_bData);
                    }
                    break;
                }
            case wdc_lib_consts.WDC_SIZE_16:
                {
                    if (RW.READ == m_direction)
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciReadCfg16(m_device.Handle,
                                reg.dwOffset, ref m_wData) :
                            wdc_lib_decl.WDC_ReadAddr16(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, ref m_wData);
                    }
                    else
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciWriteCfg16(m_device.Handle,
                                reg.dwOffset, m_wData) :
                            wdc_lib_decl.WDC_WriteAddr16(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, m_wData);
                    }
                    break;
                }
            case wdc_lib_consts.WDC_SIZE_32:
                {
                    if (RW.READ == m_direction)
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciReadCfg32(m_device.Handle,
                                reg.dwOffset, ref m_u32Data) :
                            wdc_lib_decl.WDC_ReadAddr32(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, ref m_u32Data);
                    else
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciWriteCfg32(m_device.Handle,
                                reg.dwOffset, m_u32Data) :
                            wdc_lib_decl.WDC_WriteAddr32(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, m_u32Data);
                    }
                    break;
                }
            case wdc_lib_consts.WDC_SIZE_64:
                {
                    if (RW.READ == m_direction)
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciReadCfg64(m_device.Handle,
                                reg.dwOffset, ref m_u64Data) :
                            wdc_lib_decl.WDC_ReadAddr64(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, ref m_u64Data);
                    }
                    else
                    {
                        dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                            wdc_lib_decl.WDC_PciWriteCfg64(m_device.Handle,
                                reg.dwOffset, m_u64Data) :
                            wdc_lib_decl.WDC_WriteAddr64(m_device.Handle,
                                reg.dwAddrSpace, reg.dwOffset, m_u64Data);
                    }
                    break;
                }
            }
            TraceLog((((DWORD)wdc_err.WD_STATUS_SUCCESS == dwStatus) ?
                (bIsRead ? "read " : "wrote ") + "0x" +
                ((reg.dwSize == wdc_lib_consts.WDC_SIZE_8) ?
                m_bData.ToString("X2") :
                ((reg.dwSize == wdc_lib_consts.WDC_SIZE_16) ?
                m_wData.ToString("X4") :
                ((reg.dwSize == wdc_lib_consts.WDC_SIZE_32) ?
                m_u32Data.ToString("X8") : m_u64Data.ToString("X16")))) +
                (bIsRead ? " from " : " to ") + "register " + reg.sName :
                "failed to complete the transaction on register" + reg.sName),
                    (wdc_err)dwStatus);

            wdc_lib_decl.PciConfRegData2Str(m_device.Handle, reg.dwOffset,
                sDetails, 1024, ref dwOutLen);
            TraceLog(sDetails.ToString().Replace("\n",
                System.Environment.NewLine), (wdc_err)dwStatus);
        }

        private void ReadAllRegs()
        {
            WDC_REG reg = m_regs[0];
            DWORD dwStatus = (DWORD)wdc_err.WD_STATUS_SUCCESS;
            StringBuilder sDetails = new StringBuilder(1024);

            TraceLog("displaying all registers (" + m_device.ToString(false) +
                ")", (wdc_err)dwStatus);
            for (int i = 0; i < m_regs.GetLength(0); ++i)
            {
                DWORD dwOutLen = 0;
                reg = m_regs[i];
                if (!IsLegalDirection(i))
                {
                    txtData.Text = "register " + reg.sName + "is write-only" +
                        Environment.NewLine;
                }
                else
                {
                    switch (reg.dwSize)
                    {
                    case wdc_lib_consts.WDC_SIZE_8:
                        {
                            dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                                wdc_lib_decl.WDC_PciReadCfg8(m_device.Handle,
                                    reg.dwOffset, ref m_bData) :
                                wdc_lib_decl.WDC_ReadAddr8(m_device.Handle,
                                    reg.dwAddrSpace, reg.dwOffset, ref m_bData);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_16:
                        {
                            dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                                wdc_lib_decl.WDC_PciReadCfg16(m_device.Handle,
                                    reg.dwOffset, ref m_wData) :
                                wdc_lib_decl.WDC_ReadAddr16(m_device.Handle,
                                    reg.dwAddrSpace, reg.dwOffset, ref m_wData);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_32:
                        {
                            dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                                wdc_lib_decl.WDC_PciReadCfg32(m_device.Handle,
                                    reg.dwOffset, ref m_u32Data) :
                                wdc_lib_decl.WDC_ReadAddr32(m_device.Handle,
                                    reg.dwAddrSpace, reg.dwOffset,
                                    ref m_u32Data);
                            break;
                        }
                    case wdc_lib_consts.WDC_SIZE_64:
                        {
                            dwStatus = (m_regType == ACTION_TYPE.CFG) ?
                                wdc_lib_decl.WDC_PciReadCfg64(m_device.Handle,
                                    reg.dwOffset, ref m_u64Data) :
                                wdc_lib_decl.WDC_ReadAddr64(m_device.Handle,
                                    reg.dwAddrSpace, reg.dwOffset,
                                    ref m_u64Data);
                            break;
                        }
                    }
                    TraceLog((((DWORD)wdc_err.WD_STATUS_SUCCESS == dwStatus) ?
                        "read from register " + reg.sName + " 0x" +
                        ((reg.dwSize == wdc_lib_consts.WDC_SIZE_8) ?
                        m_bData.ToString("X2") :
                        ((reg.dwSize == wdc_lib_consts.WDC_SIZE_16) ?
                        m_wData.ToString("X4") :
                        ((reg.dwSize == wdc_lib_consts.WDC_SIZE_32) ?
                        m_u32Data.ToString("X8") :
                        m_u64Data.ToString("X16")))) :
                        "failed to complete the transaction on register " +
                        reg.sName), (wdc_err)dwStatus);
                    wdc_lib_decl.PciConfRegData2Str(m_device.Handle,
                        reg.dwOffset, sDetails, 1024, ref dwOutLen);
                    TraceLog(sDetails.ToString().Replace("\n",
                        System.Environment.NewLine), (wdc_err)dwStatus);
                }
            }
        }

        private void btLog_Click(object sender, System.EventArgs e)
        {
            txtData.Clear();
        }

        private void TraceLog(string str, wdc_err status)
        {
            txtData.Text += str + Environment.NewLine;

            string sForm = (m_regType == ACTION_TYPE.CFG) ?
                "CFG Registers R/W Form: " : "RT Registers R/W Form: ";

            if (m_direction == RW.READ_ALL)
            {
                Log.TraceLog(sForm + str);
                return;
            }

            string sMsg = sForm + str + " (" + m_device.ToString(false) + ")";
            if (status == wdc_err.WD_STATUS_SUCCESS)
                Log.TraceLog(sMsg);
            else
                Log.ErrLog(sMsg);
        }
    }
}


%/PCI%
